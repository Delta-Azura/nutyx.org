   <h1>Scenario B</h1>
    <a name='111'></a>
    <h2>Introduction</h2>
     <p>You are happy with your NuTyX installation. However, you desire more packages as part of the system, and you prefer to install and compile them yourself. This is when <b>NuTyX</b> really become interesting and exciting. Get ready for the challenge ahead: tons of self-determination and heaps of patience is required <img src="../graphics/smiley-tongue-out.gif" alt="Tongue out" title="Tongue out" /><img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />. It's a long haul. But very, very rewarding and enjoyable all the way through the building processes.</p>
     <p>Good advice when using <b>Scenario B</b>: avoid at all costs any attempt to compile any external/foreign builds/packages which will conflict with the NuTyX “base-collection”. If you do this, you will face many errors relating to dependency issues when installing the NuTyX <b>cards-devel</b> package, which is not installed by default. If you really want to go ahead with something like this, you should choose <b>Scenario C</b>.</p>
     <a name='112'></a>
     <h2>The /etc/cards.conf file</h2>
      <p>A folder containing my personal packages needs to be added. This folder should <u>never</u> be updated by the command <b>cards sync</b>, so we should not specify any associated URL pointing to this folder.</p>
      <p>Binary collections are enabled; this will allow me to add any missing dependencies easily...</p>
      <p>The architecture of the machine is 64-bit.</p>
      <p>The language used on the machine is adjusted</p>
      <p>The file defines the basic system, in case we wish to return to this.</p>
      <p>The typical content of your <b>/etc/cards.conf</b> file for <b>Scenario B</b>:</p>
      <pre class="output">dir /usr/ports/personal
dir /var/lib/pkg/depot/gui|http://downloads.nutyx.org
dir /var/lib/pkg/depot/cli|http://downloads.nutyx.org
dir /var/lib/pkg/depot/base|http://downloads.nutyx.org
locale fr
locale de
base /var/lib/pkg/depot/base
base /var/lib/pkg/depot/base-extra</pre>
     <a name='113'></a>
     <h2>Development tools installation</h2>
      <p>We can now begin to install the Development packages, such as, a compiler, libraries C and C ++ tools autoconf, automake, etc... etc...</p>
      <pre class="command_user"><kbd>sudo mkdir -p /usr/ports/personal</kbd></pre>
      <p>And now we install the tools:</p>
      <pre class="command_user"><kbd>sudo cards sync</kbd></pre>
      <pre class="output">/var/lib/pkg/depot/gui/.PKGREPO
/var/lib/pkg/depot/cli/.PKGREPO
/var/lib/pkg/depot/base/.PKGREPO</pre>
        <pre class="command_user"><kbd>sudo cards install cards.devel</kbd></pre>
        <pre class="output">Retrieve info about the 66 packages: 100 %
/var/lib/pkg/depot/base/cards/.PKGREPO
/var/lib/pkg/depot/base/cards/cards.devel1429192050x86_64.cards.tar.xz
661020 Bytes - 671821 Bytes/Sec - 100% - 0 Sec remain  remain
/var/lib/pkg/depot/base/acl/.PKGREPO
/var/lib/pkg/depot/base/acl/acl.devel1412540285x86_64.cards.tar.xz
...</pre>
     <a name='114'></a>
     <h2>The /etc/pkgmk.conf file</h2>
      <p>In this scenario, it is good to check some variables:</p>
      <p>My processor has 8 cores, so for more speed and power:</p>
      <pre class="output">export MAKEFLAGS="-j8"</pre>
      <p>Sources can be stored in the folder containing the packages or in a separate folder. Personally, I prefer to put them together in a separate folder. I choose the <b>/tmp</b> folder so that they will be removed automatically before the next boot. I do not need the sources once the package is compiled and successfully installed. And finally, I prefer to have the working folder in <b>/tmp/work</b> instead of the default folder defined:</p>
      <pre class="output">PKGMK_SOURCE_DIR="/tmp"
PKGMK_KEEP_SOURCES="no"
PKGMK_WORK_DIR="/tmp/work"</pre>
      <p>I do not want to have to specify each time that sources must be downloaded if not available locally. A variable lets you do this automatically:</p>
      <pre class="output">PKGMK_DOWNLOAD="yes"</pre>
      <p>In this scenario, I do not wish to manage dependencies automatically at compile time and so I do not need the <b>.PKGREPO</b> file .. I will only use the <b>pkgmk</b> command.</p>
      <pre class="output">PKGMK_IGNORE_REPO="yes"
PKGMK_IGNORE_COLLECTION="yes"</pre>
      <p>I do not want the <b>pkgmk</b> command to split the binary package into sub packages (devel, doc, man, etc). I am happy with a single package since I compiled it myself. For my locale, I will only use (French) <b>fr</b> and German <b>de</b>.
      <pre class="output">PKGMK_GROUPS=()
PKGMK_LOCALES=(fr de)</pre>
      <p>I do not want <b>pkgmk</b> to compress the packages it builds and I do not wish to keep archives after installation:
      <pre class="output">PKGMK_COMPRESSION_PACKAGE="no"
PKGMK_CLEAN="yes"</pre>
      <p>Here's what the <b>/etc/pkgmk.conf</b> file looks like for the <b>Scenario B</b>:</p>
      <pre class="output">export CFLAGS="-O2 -pipe"
export CXXFLAGS="${CFLAGS}"
case ${PKGMK_ARCH} in
    "x86_64"|"")
       export MAKEFLAGS="-j8"
       ;;
    "i686")
       export CFLAGS="${CFLAGS} -m32"
       export CXXFLAGS="${CXXFLAGS} -m32"
       export LDFLAGS="${LDFLAGS} -m32"
       ;;
    *)
       echo "Unknown architecture selected! Exiting."
       exit 1
       ;;
esac
PKGMK_DOWNLOAD="yes"
PKGMK_SOURCE_DIR="/tmp"
PKGMK_KEEP_SOURCES="no"
PKGMK_WORK_DIR="/tmp/work"
PKGMK_IGNORE_REPO="yes"
PKGMK_IGNORE_COLLECTION="yes"
PKGMK_GROUPS=()
PKGMK_LOCALES=(fr de)
PKGMK_COMPRESSION_PACKAGE="no"
PKGMK_CLEAN="yes"</pre>
      <p>That's all you need for the <b>/etc/pkgmk.conf</b> configuration file.</p>

   <a name='2'></a>
   <h2>Compiling a package without dependencies</h2>
    <div class="important"><img src="../graphics/caution.gif" width="10" height="10" alt="!!!" /></div>
    <p>Let's start by switching to your <b><span style="color: #ff0000;">root account</span></b></p>
    <pre class="command_user"><kbd>su -</kbd></pre>
    <pre class="output">Password:</pre>
    <p>Very important to write down your password, in case you forget, unless its a code burnt into your memory. <img src="../graphics/smiley-cool.gif" alt="Cool" title="Cool" />. Note <b>the dash</b>; it makes this a login shell so that essential configuration files for the root user will be read.</p>
    <p>You will notice that prompt for the root user is red</p>
    <p>If you are reading this, make sure you have completed all the manipulations for this exercise provided by <a href="#22">the example using the scenario <b>B</b></a>.</p>
    <p>I propose to build the small JOE text editor. The object of this training, although you already have JOE, is to show you how to get hold of a single package <b>without dependencies</b> and compile it.</p>
    <p>For a package to compile and install correctly, it is important to create a folder with a name identical to the package name. In our case, the folder and package name is: <b>joe</b></p>
    <a name='21'></a>
    <h3>Folder creation</h3>
     <pre class="command"><kbd>mkdir -p /usr/ports/personal/joe</kbd></pre>
    <a name='22'></a>
    <h3>Package creation</h3>
     <p>I am using the method set out in <a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/joe.html" title="Lire dans une autre fenêtre" class="external" onclick="window.open(this.href); return false;">BLFS</a>, so please type all this text in your recipe <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />, (please make sure their names are correctly spelt) to give deserved credit to those who Maintain and Package the package joe:</p>
     <pre class="command"><kbd>cat &gt; /usr/ports/personnel/joe/Pkgfile &lt;&lt; "EOF"
# Description: JOE (Joe's own editor) is a small text editor capable of emulating WordStar, Pico, and Emacs.
# URL: http://joe-editor.sourceforge.net/
# Maintainer: JHallen, JJJordan, Marx_sk, shallot
# Packager: François Perrin

name=joe
version=3.7
release=1
source=( <a href="http://downloads.sourceforge.net/joe-editor/joe-3.7.tar.gz">http://downloads.sourceforge.net/$name-editor/$name-$version.tar.gz)</a>
build() {
  cd $name-$version
  ./configure --prefix=/usr --sysconfdir=/etc
  make
  make DESTDIR=$PKG install
}
EOF</kbd></pre>
    <a name='23'></a>
    <h3>Package compilation</h3>
     <p>The script is now completed and ready to be used for compiling your new package.<img src="../graphics/yippee.gif" alt="yippee"/></p>
     <pre class="command"><kbd>cd /usr/ports/personnel/joe
pkgmk -d</kbd></pre>

     <pre class="output">=======> PKGMK_INSTALL: no
=======> PKGMK_WORK_DIR: /usr/ports/personnel/joe/work
=======> PKGMK_SOURCE_DIR: /usr/ports/personnel/joe
=======> WARNING: CLEAN IGNORED
=======> WARNING: KEEP SOURCES
=======> PKGMK_UPDATE_SIGNATURE:
=======> PKGMK_IGNORE_FOOTPRINT: yes
=======> PKGMK_IGNORE_MD5SUM: yes
=======> .PKGREPO file will not be generated
=======> PKGMK_COMPRESS_PACKAGE: no
=======> name: joe
=======> version: 3.7
=======> Downloading 'http://downloads.sourceforge.net/joe-editor/joe-3.7.tar.gz'.
...
...
Saving to: '/usr/ports/personnel/joe/joe-3.7.tar.gz.partial'
2014-10-26 22:27:47 (1.01 MB/s) - '/usr/ports/personnel/joe/joe-3.7.tar.gz.partial' saved [696036/696036]

=======> Building '/usr/ports/personnel/joe/joe1414362465x86_64.cards.tar.xz'.
bsdtar -p -o -C /usr/ports/personnel/joe/work/src -xf /usr/ports/personnel/joe/joe-3.7.tar.gz
+ build
+ cd joe-3.7
+ ./configure --prefix=/usr --sysconfdir=/etc
...
...
make[3]: Leaving directory '/usr/ports/personnel/joe/work/src/joe-3.7'
make[2]: Leaving directory '/usr/ports/personnel/joe/work/src/joe-3.7'
make[1]: Leaving directory '/usr/ports/personnel/joe/work/src/joe-3.7'
=======> WARNING: Footprint ignored.</pre>
       
    <a name='24'></a>
    <h3>Install your package</h3>
      <p>To install this compiled package, just type the command:</p>
      <pre class="command"><kbd>pkgadd joe1414362465x86_64.cards.tar</kbd></pre>

   <a name='3'></a>
   <h2>Conclusion</h2>
     <pre class="command"><kbd>pkgmk
pkgadd</kbd></pre>
     <p>These commands will <u>always</u> be launched in your personal  <b>package</b> folder.</p>
