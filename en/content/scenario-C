<h1>Scenario C</h1>
 <h2>Introduction</h2>
  <p>
   You have ambitions to compile your own software and are convinced that this is the best way to manage a NuTyX system.
   You do not want to use the existing binaries.
  <p>
   Most packages that you wish to use are not present in the repository.
   Those that are, you prefer to compile yourself.
  <p>
   You want to get updates from available ports.
  <p>
   And of course, you want dependencies compiled automatically.
  <p>
   We at NuTyX warn you in advance, this Scenario is very time consuming.
   If you have already tinkered with similar distributions that use source builds, like CRUX, Gentoo, Exherbo, and Funtoo, then by all means, enjoy our method of installation.
   <div class="important"><img alt="[Important]" src="../graphics/caution.gif" />
    To build your own packages, it is very important to start from a base system.
   </div>
 <h2>The /etc/cards.conf file</h2>
  <p>
   A folder containing my personal packages is added.
   This folder, as well as the standard collections, should <u>never</u> be updated by the command <b>cards sync</b>, so it does not specify any URL.
  <p>
   Only the <b>base</b> collection must remain active in order to install the development tools.
  <p>
   The folder containing the build logs is specified.
  <p>
   The folders defining the basic system, when returning to a base system are specified.
  <p>
   The typical contents of your <b>/etc/cards.conf</b> file for <b>Scenario C</b>:
   <pre class="output">dir /usr/ports/personal
dir /usr/ports/gui
dir /usr/ports/cli
dir /usr/ports/base
dir /var/lib/pkg/depotrepo/base|http://downloads.nutyx.org
logdir /var/log/pkgbuild
locale fr
locale it
base /usr/ports/base
base /usr/ports/tokeep</pre>
 <h2>Development tools installation</h2>
  <p>
   We can now begin to install the development packages, such as a compiler, C and C ++ libraries, build tools (autoconf, automake, ...etc) ...etc.
   We start by creating the necessary folders:
   <pre class="command_user"><kbd>sudo mkdir -p /usr/ports/{personal,tokeep}
sudo mkdir -p /srv/www/sources</kbd></pre>
  <p>
   And now we install the tools:
   <pre class="command_user"><kbd>sudo cards sync</kbd></pre>
   <pre class="output">/var/lib/pkg/depotrepo/base/.PKGREPO</pre>
   <pre class="command_user"><kbd>sudo cards install cards.devel</kbd></pre>
   <pre class="output">Retrieve info about the 66 packages: 100 %
/var/lib/pkg/depotrepo/base/cards/.PKGREPO
/var/lib/pkg/depotrepo/base/cards/cards.devel1429192050x86_64.cards.tar.xz
661020 Bytes - 671821 Bytes/Sec - 100% - 0 Sec remain  remain
/var/lib/pkg/depotrepo/base/acl/.PKGREPO
/var/lib/pkg/depotrepo/base/acl/acl.devel1412540285x86_64.cards.tar.xz
...</pre>
 <h2>The /etc/pkgmk.conf file</h2>
  <p>
   For this scenario, it is essential to check all the variables necessary for the proper functioning of the two <b>pkgmk / cards </b> commands:
  <p>
   My processor has 4 cores but instead of using 64_bit, I prefer using a 32_bit NuTyX for its greater speed.
   <pre class="output">export MAKEFLAGS="-j4"</pre>
  <p>
   My sources are stored in a common folder, I do not want them to be deleted.
   I want the working folder to remain in the ports folder after the build.
   This will allow me to compile multiple ports without losing the work.
   This will be useful for subsequent checking.
   <pre class="output">PKGMK_SOURCE_DIR="/srv/www/sources"
PKGMK_KEEP_SOURCES="yes"
PKGMK_WORK_DIR="$PWD/work"</pre>
  <p>
   In this scenario, I will manage dependencies automatically at compile time and so I need the file <b>.PKGREPO</b> to be generated in the ports file.
   I would like to use <b>cards install</b> or <b>get</b> to be able to reinstall my binaries when they are available.
   The <b>pkgmk</b> must generate the <b>.PKGREPO</b> of the relevant collection (parent folder).
   I use the duo <b>cards / pkgmk</b>
   <pre class="output">PKGMK_IGNORE_REPO="no"
PKGMK_IGNORE_COLLECTION="no"</pre>
  <p>
   I do not want <b>pkgmk</b> to split the binary package into sub-packages (devel, doc, man, etc).
   I am happy with a single package since I compiled it myself.
   For locale, I will use French <b>fr</b> and Italian <b>it</b>.
   <pre class="output">PKGMK_GROUPS=()
PKGMK_LOCALES=(fr it)</pre>
  <p>
   I want <b>pkgmk</b> to compress my package as a (.gz) file (This algorithms is faster than .xz).
   Also, because I find that in the (.gz) format, my packages are easier to maintain and be re-installed later ...if hypothetically,
   I choose to return to a base system via the <b>cards base -r</b> command.
   <pre class="output">PKGMK_COMPRESSION_PACKAGE="yes"
PKGMK_COMPRESSION_MODE="gz"
PKGMK_CLEAN="no"</pre>
  <p>
   Here's is a posssible example of your <b>/etc/pkgmk.conf</b> for the <b>Scenario C</b>:
   <pre class="output">export CFLAGS="-O2 -pipe"
export CXXFLAGS="${CFLAGS}"
case ${PKGMK_ARCH} in
    "x86_64"|"")
       export MAKEFLAGS="-j4"
       ;;
    "i686")
       export CFLAGS="${CFLAGS} -m32"
       export CXXFLAGS="${CXXFLAGS} -m32"
       export LDFLAGS="${LDFLAGS} -m32"
       export MAKEFLAGS="-j4"
       ;;
    *)
       echo "Unknown architecture selected! Exiting."
       exit 1
       ;;
esac
PKGMK_SOURCE_DIR="/srv/www/sources"
PKGMK_KEEP_SOURCES="yes"
PKGMK_WORK_DIR="$PWD/work"
PKGMK_IGNORE_REPO="no"
PKGMK_IGNORE_COLLECTION="no"
PKGMK_GROUPS=()
PKGMK_LOCALES=(fr it)
PKGMK_COMPRESSION_PACKAGE="yes"
PKGMK_COMPRESSION_MODE="gz"
PKGMK_CLEAN="no"</pre>
  <p>
   We can now retrieve the available ports from NuTyX:
   <pre class="command_user"><kbd>sudo ports -u</kbd></pre>
   <pre class="output">Updating file list from downloads.nutyx.org::nutyx/ports/8.1/base/
Updating collection base
 Checkout ./
 Checkout aaabasicfs/
 Checkout aaabasicfs/Pkgfile
...</pre>
 <h2>Compile a package with a few dependencies</h2>
  <p>
   If you are reading this, make sure you have completed all the configuration steps for this exercise provided by the <a href="#4">example using Scenario <b>C</b></a>.
  <p>
   Dependencies are often a headache for a package maintainer.
   It is never easy to know exactly what dependencies are essential for the package to compile without errors.
  <p>
   In addition to essential dependencies, there are also optional ones that allow for more functionality.
   In principle, under NuTyX we try to offer the maximum functionality.
  <p>
   The package we are going to build as an exercise will certainly not add much to your NuTyX system, but the method used to do it will teach you a great deal.
   That is why it is relevant for future builds.
   We are going to build the <b>clipit</b> package described as follows:
  <p>
   <i>ClipIt is a lightweight GTK+ clipboard manager.</i>
  <p>
   <i>Project website: http://clipit.rspwn.com/</i>
  <p>
   <i>Requirements:</i>
  <p>
   <i>* gtk+ >= 2.10.0</i>
   <ol>
    <li>
     <h3>Folder creation</h3>
      <pre class="command"><kbd>mkdir -p /usr/ports/personnal/clipit</kbd></pre>
    <li>
     <h3>Package creation</h3>
     <p>
      Complete the <b>/usr/ports/personal/clipit/Pkgfile</b> file with this:
      <pre class="command"><kbd>description="ClipIt is a lightweight GTK+ clipboard manager."
url="http://clipit.rspwn.com/"

maintainer="Gilberto Xyhthyx &lt;xyhthyx at gmail dot com&gt;"
packager="Fran√ßois Perrin"

makedepends=(gtk)

name=clipit
version=1.4.2
release=1

source=(https://github.com/downloads/shantzu/ClipIt/$name-$version.tar.gz)
build() {
  cd $name-$version
  ./configure --prefix=/usr \
  --sysconfdir=/etc
  make
  make DESTDIR=$PKG install
}</kbd></pre>
     <li>
      <h3>Package compilation</h3>
      <pre class="command"><kbd>cards depcreate clipit</kbd></pre>
      <p>
       The very powerful <b>cards depcreate</b> command compiles and installs dependencies, then compiles the final package and installs it.
      <div>
       <img src="../graphics/yippee.gif" alt="yippee"/> That's magical and intelligent programming for you! <img src="../graphics/yippee.gif" alt="yippee"/>
      </div>
      </ol>
 <h2>Conclusion</h2>
  <pre class="command"><kbd>ports -u
ports -d
cards depends
cards depcreate
cards level</kbd></pre>
  <p>
   To know more details about thoses commands, I recommend you to read the man page for cards:
   <pre class="command"><kbd>man cards</kbd></pre>
