   <h1>Build bot Setup</h1>
    <h2>Introduction</h2>
     <div class="important">
       <img alt="[Important]" src="../graphics/caution.gif" />
       <img alt="[Important]" src="../graphics/caution.gif" />
       <img alt="[Important]" src="../graphics/caution.gif" />
       <img alt="[Important]" src="../graphics/caution.gif" />
       It's highly recommended to know NuTyX very well to succeed with this tutorial.
     </div>
      <div class="important">
       All the manipulations MUST BE done in the same SINGLE terminal. Do no use more then one terminal.
     </div>
    <h2>Each step</h2>
     <p>
      We will:
     <ol>
      <li>
       get the tools
      <li>
       put the user folders in place
      <li>
       get all the recepts
      <li>
       put the script folders in place
      <li>
       get the binaries from the remote server
      <li>
       set up the configuration files
      <li>
       Launch the script
     </ol>
   <h2>Setting up the tools (packages to install)</h2>
      <p>
       We assume that your NuTyX is clean from any devel package.
       We start to install all the utilities:
      <pre class="command_user"><kbd>get rsync git</kbd></pre>
   <h2>Configuration of the architecture</h2>
      <p>
       The first variable we need is the architecture definition (32 or 64 bits):
      <pre class="command_user"><kbd>ARCH=`uname -m`</kbd></pre>

     <h2>Version to use</h2>
      <p>
       NuTyX packages are in 2 versions available.
       Once you decide on which version you want to work, make a copy/paste of the last colomn variables.
       <table>
        <caption>
         <EM>
          List of available versions, copy/paste the correct variables depending on your choice:
         </EM>
         <tr class="sidebar">
          <th>
           Version
          <th>
           Branch
         <th>
          Variables to use
        <tr class="even">
         <td>
          fixed
         <td>
          fixed
         <td>
         <pre class="command_user"><kbd>VERSION=fixed
BRANCH=fixed</kbd></pre>
         <tr class="odd">
          <td>
           rolling
         <td>
           rolling
         <td>
          <pre class="command_user"><kbd>VERSION=rolling
BRANCH=rolling</kbd></pre>
        <tr class="even">
         <td>
          development
         <td>
          master
         <td>
         <pre class="command_user"><kbd>VERSION=development
BRANCH=master</kbd></pre>
       </table>

     <h2>Structure des projets disponibles</h2>
      <p>
       Choose the collection and the project you're going to work with.
       Once you made your choice, copy/paste defined variables in the last colomn.
      <table>
       <caption>
        <EM>
         Available collections list per project, copy/paste the variables depending your choice:
        </EM>
       </caption>
       <tr class="sidebar">
        <th>
         Collection
        <th>
         Project
        <th>
         Variables to use
       <tr class="even">
        <td>
         base
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=base
RSYNC=(base)</kbd></pre>

       <tr class="odd">
        <td>
         cli
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=cli
RSYNC=(base cli)</kbd></pre>

       <tr class="even">
        <td>
         gui
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=gui
RSYNC=(base cli gui)</kbd></pre>

       <tr class="odd">
        <td>
         cli-extra
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=cli-extra
RSYNC=(base cli)</kbd></pre>

       <tr class="even">
        <td>
         gui-extra
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=gui-extra
RSYNC=(base cli gui)</kbd></pre>

       <tr class="odd">
        <td>
         mate and mate-extra
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=mate
RSYNC=(base cli gui mate mate-extra)</kbd></pre>

       <tr class="even">
        <td>
         lxde and lxde-extra
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=lxde
RSYNC=(base cli gui lxde lxde-extra)</kbd></pre>

       <tr class="odd">
        <td>
         xfce4 and xfce4-extra
        <td>
         core
        <td>
         <pre class="command_user"><kbd>PROJECT=core
COLLECTION=xfce4
RSYNC=(base cli gui xfce4 xfce4-extra)</kbd></pre>

       <tr class="even">
        <td>
         lxqt and lxqt-extra
        <td>
         extra
        <td>
         <pre class="command_user"><kbd>PROJECT=extra
COLLECTION=lxqt
RSYNC=(base cli gui lxqt lxqt-extra)</kbd></pre>

       <tr class="even">
        <td>
         kde5 and kde5-extra
        <td>
         extra
        <td>
         <pre class="command_user"><kbd>PROJECT=extra
COLLECTION=kde5
RSYNC=(base cli gui kde5 kde5-extra)</kbd></pre>

       <tr class="odd">
        <td>
         nos
        <td>
         nos
        <td>
         <pre class="command_user"><kbd>PROJECT=nos
COLLECTION=nos
RSYNC=(base cli gui nos)</kbd></pre>

     </table>

   <h2>The git user folder in place</h3>
      <p>
       A build bot requires a lot of space.
      <p>
       At least 10 Gb of space is perfect.
      <p>
       All the folders needed are in:
      <pre class="output">/srv/www/</pre>
       and
      <pre class="output">/home/$USER/git/$VERSION</pre>
      <p>
       All the receipts will be in our personnal folder.
      <p>
       We can now create the user git folder with our own account:
      <pre class="command_user"><kbd>mkdir -pv /home/$USER/git/$VERSION</kbd></pre>
     <pre class="output">mkdir: created directory '/home/me/git'
mkdir: created directory '/home/me/git/rolling'</pre>
      

    <h2>Get all the ports of the "$COLLECTION" from git location</h2>
     <p>
      We will synchronise the status of all the ports of the <b>$COLLECTION</b> for the compilation:
      <pre class="command_user"><kbd>git clone -b $BRANCH git://git.tuxfamily.org/gitroot/nutyx/$PROJECT.git ~/git/$VERSION/$PROJECT</kbd></pre>
     <p>
       We now create all the folders needed for the script:
       <pre class="command_user"><kbd>sudo mkdir -pv \
/srv/www/{logs/$ARCH/$VERSION/$COLLECTION,$ARCH/$VERSION/$COLLECTION,sources}</kbd></pre>

    <h2>Get all the binaries define in the $RSYNC variable from the remote server </h2>
      <p>
       This command might take some time if your connection is not very fast.
      <div class="note"><img alt="[Note]" src="../graphics/note.gif" />
       You need to type this command every time you want to resync your local copy with the remote server.
      </div>
      <pre class="command_user"><kbd>for i in ${RSYNC[@]}
do
  sudo rsync -av --delete rsync://downloads.nutyx.org/nutyx/$ARCH/$VERSION/$i/ \
  /srv/www/$ARCH/$VERSION/$i/
done</kbd></pre>
    <h2>The /etc/fstab configuration file</h2>
      <p>
       We need to adjust 1 existing file

      <pre class="command_user"><kbd>sudo echo "
#    PROJECT $PROJECT
##   COLLECTION $COLLECTION
###  VERSION $VERSION
#### GIT
/home/$USER/git/$VERSION/$PROJECT \
/$VERSION/$COLLECTION/root/$PROJECT none noauto,bind" \
| sudo tee --append /etc/fstab</kbd></pre>
   <h2>Finalisation and step to reproduce</h2>
     <p>
      You're now ready to work with the compilation script. The command below needs to be reproduce in three cases:
      <ul>
       <li>
        The first time.
       <li>
        When you did something wrong with your chroot and then with your own binaries.
       <li>
        When you want to come back on the official binaries from the server.
      </ul>
     <pre class="command_user"><kbd>for i in ${RSYNC[@]}
do
  sudo rsync -av --delete rsync://downloads.nutyx.org/nutyx/$ARCH/$VERSION/$i/ \
  /srv/www/$ARCH/$VERSION/$i/
done</kbd></pre>
   <h2>Let's go</h2>
    <p>
     If you have done all the steps correctly, you should be able to start the compilation of all the ports of the project <b>$PROJECT</b>.
    <pre class="command_user"><kbd>sudo build-collection /$VERSION/$COLLECTION</kbd></pre>
    <pre><class="output">CHROOT: &lt;your collection&gt;
COLLECTION: &lt;your collection&gt;
VERSION: &lt;your version&gt;
The command: KERNEL=NONE LFS=/&lt;your version&gt;/&lt;your collection&gt; DEPOT=/DEPOT install-nutyx
DEVEL: cards.devel &&
cd /root/&lt;your collection&gt; &&
bash scripts/&lt;your collection&gt; -a &&
bash scripts/&lt;your collection&gt;-extra -a  OK ? (y)</pre>
<pre class="command_user"><kbd>y</kbd></pre>
