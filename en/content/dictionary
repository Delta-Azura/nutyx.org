   <h1>A little lexicon for NuTyX users</h1>
    <a name='ID000'></a>
    <h2>Cards</h2>
     <p>
      Cards, which stands for 'Create, Add, Remove and Download System'  <a href="#ID005">packages</a>,
      is a set of utilities to manage the installed software on your NuTyX Linux system.
     <p>
      Cards can manage <a href="#ID006">dependencies</a> for compilation and handles runtime <a href="#ID006">dependencies</a> on its own.
      This means that in 95% of all cases, runtime <a href="#ID006">dependencies</a> for a working app do not need to to be specified in the build
     <a href="#ID060">recipe</a>.
    <a name='ID005'></a>
    <h2>A package</h2>
     <p>
      A package is an archive containing a set of files of various types.
      It might include libraries, command line applications, graphical user interfaces, commands, configuration information, etc...
     <p>
      When the package is installed on your NuTyX system, it will be handled by the <a href="#ID005">package</a> manager
     <a href="#ID000">cards</a>.
     <p>
      <b>Package archive name syntax</b>
      <ul>
      <li>
       <b>name</b>: (port-name)
      <li>
       <b>.group-name</b>: only if it is a group package archive. See configuration: 'PKGMK_GROUPS'
      <li>
       <b>.locale-name</b>: only if it is a locale package archive. See configuration: 'PKGMK_LOCALES'
      <li>
       <b>build-version</b>: 10-digit Unix timestamp of the archive build time. See also 'PKGMK_BUILDVER'
      <li>
       <b>architecture</b>: &quot;any&quot; or the required system architecture: e.g. ("$(uname -m)" x86_64).
      <li>
       <b>.extension</b>: the predefined package archive reference extension without compression.
      <li>
       <b>.compression-extension</b>: only if it is a compressed archive. see configuration: 'PKGMK_COMPRESS_PACKAGE'
     </ul>
     <p>
      <table>
       <caption>
        <EM>
         Pkgarchive Names Without Compression:
        </EM>
       </caption>
       <tr class="sidebar">
        <th>
         Package archive Name
        <th>
         Description
       <tr class="even">
        <td>
         cards1462695664x86_64.cards.tar
        <td>
         name: cards, no group</br>
         buildvers: 1462695664</br>
         arch: x86_64</br>
         ext: cards.tar
       <tr class="odd">
        <td>
         cards.devel1462695664x86_64.cards.tar
        <td>
         name: cards,group: devel</br>
         buildvers: 1462695664</br>
         arch: x86_64</b>
         ext: cards.tar
       <tr class="even">
        <td>
         cards.man1462695664any.cards.tar
        <td>
         name: cards, group: man</br>
         buildvers: 1462695664</br>
         arch: any</br>
         ext: cards.tar
     </table>
     <p>
     <table>
       <caption>
        <EM>
         Pkgarchive Names With Compression:
        </EM>
       </caption>
        <tr class="sidebar">
         <th>
          Package archive Name
         <th>
          Description
        <tr class="even">
         <td>
          acl.fr1462707691any.cards.tar.xz
         <td>
          name: acl, group: fr</br>
          buildvers: 1462707691</br>
          arch: any</br>
          ext: cards.tar, compressed
        <tr class="odd">
         <td>
          acl1462707691x86_64.cards.tar.xz
         <td>
          name: acl, no group</br>
          buildvers: 1462707691</br>
          arch: x86_64</br>
          ext: cards.tar, compressed
     </table>
    <a name='ID006'></a>
    <h2>A dependency</h2>
     <p>
      A dependency is a <a href="#ID005">package</a> <b>AAA</b> needed either for running or for compiling another <a href="#ID005">package</a> <b>BBB</b>.
     <p>
      A good example of a dependency is the <i>qtbase</i> <a href="#ID005">package</a> which is used by many <a href="#ID005">packages</a> of the <i>kde5</i> <a href="#ID010">collection</a>.
    <a name='ID010'></a>
    <h2>A collection</h2>
     <p>
      A collection is a collection of all the <a href="#ID005">packages</a> that provide a particular set of functions.
     <p>
      When you install a base system from the MINI ISO or with the installation <a href="#ID050">scripts</a>,
      you install the <i>base</i> <a href="#ID010">collection</a>.
     <p>
      The <i>gui</i> <a href="#ID010">collection</a>, for example, allows you to install a graphical user interface.
      For such a graphical user interface, you can choose your favorite windows manager.
     <p>
      Under NuTyX, it's possible to install <i>kde5</i>, <i>lxqt</i>, <i>mate</i> or <i>xfce4</i> desktop <a href="#ID010">collections</a>.
    <a name='ID020'></a>
    <h2>A family</h2>
     <p>
      A <b>family</b> defines a set of <a href="#ID005">packages</a> which begin with a common name (the mother package).
      Additional parts are separated by a hyphen (-).
     <p>
      An example of a NuTyX package family:
      <ul>
       <li>
        gstreamer1
       <li>
        gstreamer1-plugins-bad
       <li>
        gstreamer1-plugin-good
       <li>
        gstreamer1-plugin-libav
       <li>
        gstreamer1-...
      </ul>
      <p>
       Usually, a family of <a href="#ID005">packages</a> will be in the same <a href="#ID010">collection</a>.
      <p>
       Such packages in a package family share variables with the mother package (gstreamer1 in this example).
    <a name='ID025'></a>
    <h2>A group</h2>
     <p>
      A group of packages is made of a set of packages providing a specific usage, for example the <b>devel</b> group provides tools for compilation.
     <p>
      In a group, it's the part of the name after the dot which specifies the group.
     <p>
      For example, the <b>gcc.devel</b> package is part of the <b>devel</b> group.
     <p>      
      Each locale is a group as well.
     <p>
      Most of available packages are split into such groups.
     <p>
      Current groups include: <a href="./?branch=fixed&arch=x86_64&searchpkg=devel">devel</a>,
      <a href="./?branch=fixed&arch=x86_64&searchpkg=man">man</a>,
      <a href="./?branch=fixed&arch=x86_64&searchpkg=doc">doc</a>,
      lib and <a href="./?branch=fixed&arch=x86_64&searchpkg=service">service</a>
      and each available locale <b>fr, de, da, it, pt, tr, ru, sv, nn, es, nl and fi</b>.
    <a name='ID030'></a>
    <h2>A category</h2>
     <p>
      A category defines a set of applications which have similar functions.
      A typical example of a category is "Internet", which includes browsers, irc and mail clients, etc.
    <a name='ID040'></a>
    <h2>The base system</h2>
     <p>
      The NuTyX 'base system' defines the minimum set of <a href="#ID005">packages</a> that will never be removed.
     <p>
      The list of <a href="#ID005">packages</a> to keep when we want to return to a base system is defined in the <i>/etc/cards.conf</i> file.
      The keyword at the beginning of the line is: <i>base</i>.
    <a name='ID050'></a>
    <h2>A script</h2>
     <p>
      A script is used (like a cinema script) to define each action that has to be executed by the interpreter.
      The scripts described here specify the actions to be executed for the construction of a <a href="#ID005">package</a>.
      See <a href="#ID060">recipe</a>.
     <p>
      A script can also be used for installing NuTyX Linux from another Linux distribution, or from an already installed NuTyX Linux system.
    <a name='ID060'></a>
    <h2>A recipe</h2>
     <p>
      A recipe is a special <a href="#ID050">script</a> which defines the construction of a <a href="#ID005">package</a>.
      Under NuTyX, the recipe of a <a href="#ID005">package</a> is located in the <a href="#ID080">Pkgfile</a> file.
    <a name='ID070'></a>
    <h2>A port</h2>
     <p>
      In NuTyX, a port is a folder which contains all necessary files for the construction of a <a href="#ID005">package</a>.
      It will at least contain a file named <a href="#ID080">Pkgfile</a>.
     <p>
      The port can also contain other required files (e.g. patch files) or port metafiles.
     <p>
      <b>Port Metafile Syntax</b>
      <ul>
       <li>
        <b>name</b>: (port-name)
       <li>
        <b>.group-name</b>: only if it is a group package archive. see configuration: 'PKGMK_GROUPS'
       <li>
        <b>.locale-name</b>: only if it is a locale package archive. see configuration: 'PKGMK_LOCALES'
      <br />
      Followed by one of these file extentions:
      <br/><br/>
       <li>
        <b>.pre-install, or </b>: TODO add more info: what it does, when is this script executed.
       <li>
        <b>.post-install</b>: TODO add more info: what it does, when is this script executed.
       <li>
        <b>.README</b>: a file describing various options, actions, configurations of the port.
     </ul>
     <p>
      EXAMPLE: Meta files port: lxdm
      <pre class="output">
| Meta File Name    | 
| ------------------|
| lxdm.pre-install  |
| lxdm.post-install |
| lxdm.README       |
</pre>
     <p>
      EXAMPLE: Meta files port: cards
      <pre class="output">
| Meta File Name                | 
| ------------------------------|
| cards.devel.post-install      |
| cards.fr.README               |
</pre>
     <p>
      The term <i>port</i> refers to a remote repository containing <i>ports</i> which can be downloaded with a suitable client program.
     <p>
      NuTyX uses the <i>ports tool</i> for downloading all the <i>ports</i> from a remote repository and stores them by default in the <i>/usr/ports/&lt;name_of_<a href="#ID010">collection</a>&gt; folder</i>.
    <a name='ID080'></a>
    <h2>The 'Pkgfile' file</h2>
     <p>
      A Pkgfile is a <a href="#ID050">script</a> file. It contains the <a href="#ID060">recipe</a> for the construction of a <a href="#ID005">package</a>
     which can be installed with the <i>package manager</i>  <a href="#ID000">cards</a>
     <p>
      The content of this file follows a common schema and is composed of three parts:
     <ol>
      <li>
       `Pkgfile-Header`: (optional but highly recommended) general information about the <a href="#ID005">package</a>: Description, URL, Developer(s), Packager(s), <a href="#ID006">dependencies</a>
      <li>
       `Mandatory information`: for the construction of the <a href="#ID005">package</a>: Name, version, release
      <li>
       `Required build function`: The "build" function defines the construction itself of the <a href="#ID005">package</a>
     </ol>
     <p>
      <b>NOTE:</b> the above outlines only the most general situation. See also package <a href="#ID020">family</a> for exceptions.
     <p>
      It is highly recommended to put the <a href="#ID080">Pkgfile</a> file in a folder with the same name as the <i>name</i> variable defined in the <a href="#ID080">Pkgfile</a>.
      The folder name will be treated as the default name of the base binary package if it is not (re)defined by the name variable.
     <p>
      Example of a Pkgfile located in the <i>mypackage</i> folder:
      <pre class="output"># Depends on: glib atk

description="My first package"
url="http://downloads.nutyx.org"
packager="tnut at nutyx dot org"
name=mypackage
version=1.0
release=1
source=(${url}/files/$name-$version.tar.xz)
build() {
cd ${name}-$version
./configure --prefix=/usr \
--disable-static
make
make DESTDIR=$PKG install
}</pre>
    <a name='ID090'></a>
    <h2>Branchs</h2>
<ul>
 <li>
  The "fixed" branch
  <p>
   This is the stable version of NuTyX. For this, every package is frozen at the time of it's release; only security updates will be applied.
  <p>
   New packages can still be added.
 <li>
  The "development" (or "master") branch
  <p>
   It's the main line (master) of the GIT project for every available collection.
  <p>
   The update process is a "rolling release" mode during the entire life of the fixed version and its minor versions (about one year).
  <p>
   Since all updates are large and frequent, the  "development" branch is most often not compatible with the fixed version of NuTyX.
   In this case, merging into the "fixed" branch is never possible.
  </ul>
<p>
 The "fixed" branch have a "limited lifetime" corresponding to the lifetime of the fixed version of NuTyX at that time. 


    <a name='ID100'></a>
    <h2>A chroot</h2>
     <p>
      A chroot is a way of isolating the working environment while using the <a href="#ID060">recipes</a>
     coming from various <a href="#ID070">ports</a>.
     <p>
      It is also needed to ensure that no <a href="#ID006">dependency</a> will be installed from the host operating system.
    <a name='ID200'></a>
    <h2>Levels</h2>
     <p>
      When <a href="#ID000">cards</a> compiles a <a href="#ID005">package</a>, it needs to know the level of compilation of that <a href="#ID005">package</a>.
     <p>
      Each <a href="#ID005">package</a> may or may not contain <a href="#ID006">dependencies</a>.
     <p>
      If a <a href="#ID005">package</a> named <i>AAAA</i> does not contain any <a href="#ID006">dependencies</a>, it will be at the first level: level 0 (zero).
     <p>
      If a package named <i>BBBB</i> contains a <a href="#ID006">dependency</a> named <i>AAAA</i>, this package will be at second level: level 1 (one).
     <p>
      The list of <a href="#ID006">dependencies</a> for the compilation of a <a href="#ID005">package</a> is defined by the line:
<pre class="output"># Depends on: glib atk pango gtk xorg-libx11</pre>
     <p>
      in a <a href="#ID080">Pkgfile</a>.
   <a name='ID300'></a>
   <h2>Alias</h2>
    <p>
     Some commands are actually aliases used to simplify things.
     An alias is a kind of shortcut to the original command.
     To know all the aliases available to you, just type <b>alias</b> in your terminal:
<pre class="command_user"><kbd>alias</kbd></pre>
     <p>
      If you want to modify a defined alias in your NuTyX, you need to edit the <b><span style="color: #007a00;">.bashrc</span></b> file located in your home directory.
     <div>Example extract of <b>/root/.bashrc</b>:</div>
     <pre class="output">if [ -f "/etc/bashrc" ] ; then
  source /etc/bashrc
fi
if [ $EUID -eq 0 ]; then
         alias del='cards remove'
         alias get='cards install'
         alias up='cards install -u'
         alias check='cards sync;cards diff'
else
         alias del='sudo cards remove'
         alias get='sudo cards install'
         alias up='sudo cards install -u'
         alias check='sudo cards sync;sudo cards diff'
fi
alias search='cards search'
alias ll='ls -l'
alias l='ls -alh'
alias duh='du -h --max-depth=1'
alias dfh='df -h'
alias pkgfind='cards list| grep -i'
# End ~/.bashrc</pre>
