<h1>"mybld" command setup</h1>
 <h2>Important</h2>
  <p>
   All the commands are enter via your account.
   It means no need to use the <i>root</i> account.
  <p>
   Once the GIT project is recovered,
   all manipulations MUST be done from the folder containing your GIT project.

 <h2>Setup</h2>
  <h3>Tools (packages to install)</h3>
   <p>
    It is assumed that your NuTyX is free from any development package.
    So we start by installing the utilities:
    <pre class="command_user"><kbd>get rsync git</kbd></pre>

  <h3>Get the GIT project</h3>
   <p>
    We start by cloning the GIT project containing all the NuTyX recipes:
    <pre class="command_user"><kbd>git clone -b &ltbranch&gt git://github.com/NuTyX/packages-x86_64.git &ltbranch&gt</kbd></pre>
    The variable &ltbranch&gt can take <i>testing</i> or <i>rolling</i> as value.
    <p>
    Once the GIT project in place, we move to the root of it,
    indeed the command <i><b>mybld</b></i> uses information from the GIT
    (VERSION, USERNAME, EMAIL, etc).
  <h3>Go to the root of the projet</h3>
   The GIT project is cloned.
   We need to go to the root of it.
   <pre class="command_user"><kbd>cd &ltbranch&gt</kbd></pre>
   <div class="important">
    From now on all the followings commands are launched from the actual folder.
   </div>
  <h3>Setup my name and email</h3>
   This step is necessary if you want to share your new packages, indeed,
   the <b><i>mybld -n</i></b> command uses this information when creating your new package.
   <pre class="command_user"><kbd>git config --global user.name "James Bond"
git config --global user.email "james@nutyx.org"</kbd></pre>

  <h3>Implementation of working directories</h3>
   <p>
    The <b><i>mybld</i></b> command uses a set of folders for its operation,
    they must therefore be created using the command:
    <pre class="command_user"><kbd>mybld -I</kbd></pre>
   <p>
    You can adjust the operating folders locations in the configuration file <b><i>~/.mybld</i></b>
    via the variables <b>ROOT</b>, <b>ROOTMOUNT</b> and <b>VERSION</b>.

  <h3>Available Collections</h3>
   <p>
    Choose the collection you want to work on.
    Depending on the collection chosen,
    you will need to retrieve the collections specified in the right column.
    <table>
     <caption>
      <EM>
       Collections list.
      </EM>
     </caption>
     <tr class="sidebar">
      <th>
       Collection
      <th>
       Collection(s) to retrieve
     <tr class="even">
      <td>
       base
      <td>
       base
     <tr class="odd">
      <td>
       cli
      <td>
       base cli
     <tr class="even">
      <td>
       gui
      <td>
       base cli gui
     <tr class="odd">
      <td>
       cli-extra
      <td>
       base cli cli-extra
     <tr class="even">
      <td>
       gui-extra
      <td>
       base cli gui gui-extra
     <tr class="odd">
      <td>
       desktops
      <td>
       base cli gui desktops
    </table>

  <h3>Retrieving binaries collections</h3>
   <p>
    Depending the choose collection, launch the command:
    <pre class="command_user"><kbd>mybld -s name_of_collection</kbd></pre>
    to retrieve the collection(s) needed.
   <p> 
    For example, to use the <i>gui</i> collection, run the command:
    <pre class="command_user"><kbd>for i in base cli gui; do mybld -s $i;done</kbd></pre>
   <p>
    If you want to recover the entire collection, run the same command but without arguments:
    <pre class="command_user"><kbd>mybld -s</kbd></pre>
   <p>
    You can specify a custom address and version in the <b>~/.mybld</b> configuration file
    via the <b>URL</b> and <b>VERSION</b> variables.

 <h2>Using the command</h2> 
  <h3>(Re)Compile a package</h3>
   <p>
    <pre class="command_user"><kbd>mybld name_of_package</kbd></pre>
    Compilation begins immediately.
  <h3>Increment the version and recompile a package</h3>
   <p>
    <pre class="command_user"><kbd>mybld -i name_of_the_package</kbd></pre>
    After confirmation, the compilation start immediatly.

 <h2>Advanced mode</h2>
   Let's say we have a critical package that doen't want to build properly.
   In that case, the best way is then to use the <i>-p</i> option for <i>pause</i>.
  <p>
   To illustrate the purpose of <b>--pause</b> option, I will try to compile nftables
  <h3>Entering into the chroot</h3>
    <pre class="command_user"><kbd>mybld -p nftables</kbd></pre>
    <pre class="output">You are now in chroot.
Type exit when finish.

 Good luck !!!
 
</pre>
  <h3>A new command is born</h3>
   Depending of the collection the package you want to build, you get a new command named <b>&ltcollection_name&gt</b>.
   <p>
    In this example <i>nftables</i> package belong to <i>cli-extra</i> collection so we can now type:
    <pre class="command"><kbd>cli-extra -h</kbd></pre>
    <pre class="output">usage: cli-extra [option]
options:
   -a,   --all                 will build all the ports of the 'cli-extra' collection in the right order
   -l,   --list                will list all the ports of the 'cli-extra' collection in the right order
  -ru,   --remove-url          remove the URL part in /etc/cards.conf file for the 'cli-extra' collection
  -cp,   --check-ports         check if new ports are available
  -cb,   --check-binaries      check if binaries are uptodate
   -d,   --dry                 check if binaries are different then the ports but dont build anything
   -s,   --sync                synchronise binaries from rsync server location
   -c,   --config              printout the configuration
   -h,   --help                print help and exit
   -v,   --version             print version and exit
   -u,   --usage               print the recommended way of using the 'gui' script</pre>

  <h3>Where is what</h3>
  That's now the big question.
     <table>
     <caption>
      <EM>
       Location of:
      </EM>
     </caption>
     <tr class="sidebar">
      <th>
       Directory
      <th>
       Location
     <tr class="even">
      <td>
       DEPOT
      <td>
       /DEPOT
     <tr class="odd">
      <td>
       cli-extra collection DEPOT
      <td>
       /DEPOT/cli-extra
     <tr class="even">
      <td>
       nftables Pkgfile
      <td>
       /DEPOT/cli-extra/nftables/Pkgfile
     <tr class="odd">
      <td>
       Sources files
      <td>
       /sources
     <tr class="even">
      <td>
       Compilation logs
      <td>
       /LOGS
     <tr class="odd">
      <td>
       working directory
      <td>
       /tmp/work/src and
       /tmp/work/pkg
    </table>
  <h3>Go on with compilation</h3>
  So let's give a try to compile nftables now. Just type:
  <pre class="command"><kbd>cli-extra nftables</kbd></pre>
  Compilation with start just like normal.
  <p>
   If an error occur now, it will just return to the prompt:
   <pre class="output">checking for LIBMNL... yes
checking for LIBNFTNL... no
configure: error: Package requirements (libnftnl >= 1.1.8) were not met:

No package 'libnftnl' found

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.

Alternatively, you may set the environment variables LIBNFTNL_CFLAGS
and LIBNFTNL_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.
=======> ERROR: Building '/DEPOT/cli-extra/nftables/nftables1608914972x86_64.cards.tar.xz' failed.
cards 2.4.124 create: could not parse Pkgfile: While running 'build()'</pre>

   
   
  <h3>Fix the issue</h3>
   We can now fix the issue by adjusting the deps:
   <pre class="command"><kbd>cards install libnftnl libnftnl.devel</kbd></pre>
   We go to the working directory and we give another try :
   <pre class="command"><kbd>cd /tmp/work/src/nftables-0.9.7
 ./configure --prefix=/usr \
        --sysconfdir=/etc/nftables \
        --mandir=/usr/share/man \
        --with-json</kbd></pre>
  Looks beter.
  <pre class="output">nft configuration:
  cli support:			readline
  enable debugging symbols:	yes
  use mini-gmp:			no
  enable man page:              yes
  libxtables support:		no
  json output support:          yes
  enable Python:		yes (with /usr/bin/python)</pre>
  We can now continue the rest of the pkgfile commands:
  <pre class="command"><kbd>make</kbd></pre>
  the last command in Pkgfile is:
  <pre class="output">make DESTDIR=$PKG install</pre>
  PKG variable need to be assign to /tmp/work/pkg:
  <pre class="command"><kbd>PKG=/tmp/work/pkg</kbd></pre>
  time to finish:
  <pre class="command"><kbd>make DESTDIR=$PKG install
install -Dm644 ../nftables.conf "$PKG/etc/nftables/nftables.conf"</kbd></pre>
 
  <h3>Packing up</h3>
  when Pkgfile is complete, we can go back to the Pkgfile directory and use the command pkgmk -po to finish the job:
  <pre class="command"><kbd>cd /DEPOT/cli-extra/nftables/
pkgmk -po</kbd></pre>
 <h2>Help</h2>
  <p>
   The <b><i>mybld</i></b> command allows all kinds of options.
   <pre class="command_user"><kbd>mybld -h</kbd></pre>
  <p>
   Remember to consult mybld's man page to obtain more information about other possible options:
   <pre class="command_user"><kbd>man mybld</kbd></pre>

