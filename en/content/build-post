  <h1>Post-construction and (optional) generation of the iso</h1>
   <h2>Introduction</h2>
    <p>
     If you've done pass2 successfully, you then have all the packages needed for a basic system.
    <p>
     We can now finalise our NuTyX and adapt it to our needs.
     And then, we can produce an installable ISO if we want to.
    <p>
     It's time to decide what you still need, at this point of progress in your NuTyX:
   <ol>
    <li>
     Does not have a kernel.
    <li>
     Does not contain a boot program.
    <li>
     Does not contain any other formatting tools than the one for ext3, ext4.
    <li>
     Does not contain any tool for RAID management.
    <li>
     Cannot connect to a dhcp server and get a dynamic address.
    <li>
     Does not contain a text editor.
   </ol>
    <p>
     On the other hand your NuTyX will contain some services that you most probably will never use.
   <h2>How to go on</h2>
    <p>
     It's now time for you to decide what you need.
     A boot system, a kernel, your favourite file system, logical volume or RAID and your IP address dynamic or static.
    <p>
     Before that we need to configure a minimum 'cards' package manager and download all the ports containing the building receipts of all the available NuTyX packages.
    <ol>
     <li>
      We exit from the NuTyX.
      <pre class="command"><kbd>exit</kbd></pre>
      <p>
       We check if the LFS variable is still set.
      <pre class="command"><kbd>echo $LFS</kbd></pre>
      <p>
       It should return something.
      <pre class="output">/mnt/lfs</pre>
     <li>
      We can now re-enter the new NuTyX to finalise the job.
      <pre class="command"><kbd>chroot $LFS /usr/bin/env -i HOME=/root TERM="$TERM" PS1='\u: \w\$' \
/bin/bash --login</kbd></pre>
No error should be shown:
      <pre class="output">root [ / ]# </pre>
     <li>
      We begin by adjusting the cards.conf file.
      We use from now on, only the receipt coming from the git project.
      You need to adapt the language if necessary.
    <pre class="command"><kbd>cat &gt; /etc/cards.conf &lt;&lt; "EOF"
dir /usr/ports/gui-extra
dir /usr/ports/gui
dir /usr/ports/cli-extra
dir /usr/ports/cli
dir /usr/ports/base
locale de
base /usr/ports/base
EOF</kbd></pre>
     <li>
      We can now download all the available ports and compile the receipts we want (as long the collections are correctly configured in the cards.conf file above)
      <pre class="command"><kbd>ports -u</kbd></pre>
      <pre class="output">...</pre>
      <p>We are now ready to finalise our NuTyX</p>
     </ol>
   <h2>The kernel compilation and optional port compilations</h2>
    <ol>
     <li>
      <h3>Kernel compilation</h3>
     </li>
      <p>
       The kernel will be the only mandatory package, without it your NuTyX will never be able to start and run.
       You can choose different possibilities:
       <ol>
        <li>
         <h4>Compilation of one of the available port kernels</h4>
          <p>
           This choice is mandatory if you plan to produce an installable ISO. It's also the simplest choice:
          <pre class="command"><kbd>cd /usr/ports/base/kernel-lts
pkgmk -d -i</kbd></pre>
        <li>
         <h4>Compile your own kernel</h4>
         <p>
         This choice means that the generation of an installable ISO will be not possible</p>
         <p>
         You can follow the article explaining how to <a href="build-kernel">compile your own kernel</a> or
         you will find many tutorials about kernel compilation on the net.
       </ol>
     <li>
      <h3>Remove unnecessary services (recommended)</h3>
     <li>
       <p>
        During the construction of your NuTyX, services ssh and rsync have been automatically installed.
        If you do not plan to activate a rsync server or do not plan to remote access your machine, it's strongly recommended that you deactivate those services.
        Even if you don't know what they are, do:
       <pre class="command"><kbd>cards remove openssh.service
cards remove rsync.service</kbd></pre>
      <h3>Add grub, the boot process tool (optional)</h3>
       <p>
        The grub package is only needed if you decide to produce an installable ISO or if you don't have any boot procedure yet on your machine (most probably you already have one):
      <pre class="command"><kbd>cards depcreate grub</kbd></pre>
      <p>
       Once grub is installed, you will be able to setup your boot process via the command line or later via the generated ISO.
     <li>
      <h3>Adding other file system supports (optional)</h3>
      <p>The following file systems are available:</p>
      <pre class="command"><kbd>cards depcreate btrfs-progs</kbd></pre>
      <pre class="command"><kbd>cards depcreate xfsprogs</kbd></pre>
      <pre class="command"><kbd>cards depcreate reiserfsprogs</kbd></pre>
      <pre class="command"><kbd>cards depcreate jfsutils</kbd></pre>
      <p>
       Choose your favourite one or leave it as ext3 , ext4.
     <li>
      <h3>Adding the logical partition tools and RAID (optional)</h3>
     </li>
      <p>
       If you are using RAID system:
      <pre class="command"><kbd>cards depcreate mdadm</kbd></pre>
     <li>
      <h3>Adding a dhcp client enables you to obtain a dynamic IP address (optional)</h3>
     </li>
      <p>
       If you don't want to use a fixed ip address, you will need a dhcp client tool:
      <pre class="command"><kbd>cards depcreate dhcpcd</kbd></pre>
     <li>
      <h3>Adding a text editor (optional)</h3>
     </li>
      <p>
       The installer in the generated ISO uses the command 'vi' to edit your grub file, you can choose between:
      <pre class="command"><kbd>cards depcreate e3</kbd></pre><p>and</p>
      <pre class="command"><kbd>cards depcreate vim</kbd></pre>
     <li>
      <h3>Adding the NFS support (optional)</h3>
     </li>
      <p>
       If you don't use or don't know about <a href="https://en.wikipedia.org/wiki/Network_File_System">NFS</a>, you can ignore this option:
      <pre class="command"><kbd>cards depcreate nfs-utils</kbd></pre>
      <p>
       Like the sshd and rsync services, if you don't need a NFS server. do:
      <pre class="command"><kbd>cards remove nfs-utils.service</kbd></pre>
     </ol>
  <h2>Option1: Produce an installable ISO</h2>
   <ol>
    <li>
     We add all the necessary files for a working ISO.
    <pre class="command"><kbd>cp -av /root/development/iso /ISO</kbd></pre>
    <pre class="output">'/root/development/iso' -&gt; '/ISO'
'/root/development/iso/isolinux' -&gt; '/ISO/isolinux'
'/root/development/iso/isolinux/boot.cat' -&gt; '/ISO/isolinux/boot.cat'
'/root/development/iso/isolinux/boot.msg' -&gt; '/ISO/isolinux/boot.msg'
'/root/development/iso/isolinux/isolinux.bin' -&gt; '/ISO/isolinux/isolinux.bin'
'/root/development/iso/isolinux/isolinux.cfg' -&gt; '/ISO/isolinux/isolinux.cfg'</pre>
    <pre class="command"><kbd>cp -v /boot/kernel-* /ISO/isolinux/kernel</kbd></pre>
    <pre class="output">'/boot/kernel-3.19.3' -&gt; '/ISO/isolinux/kernel'</pre>
    <pre class="command"><kbd>cp -v /boot/initrd-* /ISO/isolinux/initrd</kbd></pre>
    <pre class="output">'/boot/initrd-3.19.3' -&gt; '/ISO/isolinux/initrd'</pre>
    <div class="note"><img alt="[Note]" src="../graphics/note.gif" />
     Consult the options at the bottom of the page before going further if you want to customize your ISO by adding some packages or if you want to get rid of the binaries archives and build logs to reduce the size of your ISO.
    </div>
    <li>
     We produce the squashfs files used by the ISO and erase the existing one if necessary as the mksquashfs command is not able to overwrite the existing file.
    <pre class="command"><kbd>mkdir -p /ISO/isolinux/boot/
cd /
for dir in opt bin etc lib root run sbin usr var home
do
  [ -f ISO/isolinux/boot/$dir.squashfs ] && rm ISO/isolinux/boot/$dir.squashfs
  mksquashfs $dir ISO/isolinux/boot/$dir.squashfs
done</kbd></pre>
    <li>
     We can now exit NuTyX and produce the ISO.
    <pre class="command"><kbd>exit</kbd></pre>
    <li>
     We can finally generate our ISO using the version with todayâ€™s date.
    <div class="important"><img alt="[Important]" src="../graphics/caution.gif" /><img alt="[Important]" src="../graphics/caution.gif" /><img alt="[Important]" src="../graphics/caution.gif" />
     Before you start the next command, make sure the <b>LFS</b> variable is still set and the commands <b>mkisofs</b> and <b>isohybrid</b> are available on your host linux distribution.
     They are belonging to <b>cdrkit</b> and <b>syslinux</b> packages.
    </div>
    <pre class="command"><kbd>sh $LFS/root/development/scripts/mkiso</kbd></pre>
    <pre class="output">Warning: creating file system that does not conform to ISO-9660.
I: -input-charset not specified, using utf-8 (detected in locale settings)
Size of boot image is 4 sectors -&gt; No emulation
  3.82% done, estimate finish Fri Jan  9 21:46:48 2015
  7.63% done, estimate finish Fri Jan  9 21:46:48 2015
 11.44% done, estimate finish Fri Jan  9 21:46:48 2015
 15.25% done, estimate finish Fri Jan  9 21:46:48 2015
 19.06% done, estimate finish Fri Jan  9 21:46:48 2015
 22.88% done, estimate finish Fri Jan  9 21:46:48 2015
 26.68% done, estimate finish Fri Jan  9 21:46:48 2015
 30.50% done, estimate finish Fri Jan  9 21:46:48 2015
 34.31% done, estimate finish Fri Jan  9 21:46:48 2015
 38.12% done, estimate finish Fri Jan  9 21:46:48 2015
 41.94% done, estimate finish Fri Jan  9 21:46:48 2015
 45.74% done, estimate finish Fri Jan  9 21:46:48 2015
 49.56% done, estimate finish Fri Jan  9 21:46:48 2015
 53.37% done, estimate finish Fri Jan  9 21:46:48 2015
 57.19% done, estimate finish Fri Jan  9 21:46:48 2015
 60.99% done, estimate finish Fri Jan  9 21:46:48 2015
 64.81% done, estimate finish Fri Jan  9 21:46:48 2015
 68.62% done, estimate finish Fri Jan  9 21:46:48 2015
 72.43% done, estimate finish Fri Jan  9 21:46:48 2015
 76.24% done, estimate finish Fri Jan  9 21:46:48 2015
 80.06% done, estimate finish Fri Jan  9 21:46:48 2015
 83.86% done, estimate finish Fri Jan  9 21:46:48 2015
 87.68% done, estimate finish Fri Jan  9 21:46:48 2015
 91.49% done, estimate finish Fri Jan  9 21:46:48 2015
 95.31% done, estimate finish Fri Jan  9 21:46:48 2015
 99.11% done, estimate finish Fri Jan  9 21:46:48 2015
Total translation table size: 2048
Total rockridge attributes bytes: 1751
Total directory bytes: 4096
Path table size(bytes): 38
Max brk space used 28000
165140 extents written (322 MB)</pre>
   <p>
    You now have an ISO located in the $LFS folder.
   <pre class="command"><kbd>ls $LFS/</kbd></pre>
   <pre class="output">bin   etc   lib    NuTyX_x86_64-20161001.iso     root  sources  base  usr
boot  home  lib64  NuTyX_x86_64-20161001.md5sum  run   srv      tmp     var
dev   ISO   mnt    proc sbin  sys      tools</pre>
   <li>
    You just need to transfer it to your USB key and test it.
   <pre class="command"><kbd>dd if=$LFS/NuTyX_x86_64-20161001.iso of=/dev/sdb</kbd></pre>
   <pre class="output">526336+0 records in
526336+0 records out
269484032 bytes (269 MB) copied, 66.4757 s, 4.1 MB/s</pre>
  </ol>
   <p>
    Congratulations, you now have a new base system NuTyX in your hands ready to be installed on all your machines.
  <h2>Options2: Reduce the size of your final ISO.</h2>
   <ol>
    <li>
     If you want to reduce the size of the final ISO, you can remove the binaries archives and the logs, they won't be needed.
     If you want to keep the archives, give the following command:
     <pre class="command"><kbd>rsync -a /root/development/base/ /base/</kbd></pre>
     <p>
      no error should be printout.
     <p>
      We can now delete the binaries from the git.
     <pre class="command"><kbd>find /root/ -name "*.cards.*" -exec rm -v {} \;</kbd></pre>
     <p>
      no error should be printout.
     <p>
      We erase the logs.
     <pre class="command"><kbd>mv /root/logs /logs</kbd></pre>
     <p>
      If needed, binaries and logs are stored at the root directory of the new produced NuTyX.
    <li>
     The compiled kernel uses a lot of space.
     If you want to reduce the size of your ISO, you can delete the documentation and the sources of the kernel:
     <pre class="command"><kbd>pkgrm kernel.doc
pkgrm kernel.devel</kbd></pre>
  </ol>
