<h1>NuTyX version 21.10 manual</h1>
 <h2>CONFIGURATION</h2>
    <ol>
      <li><h3>Language and locale</h3></li>
       <p>
        The command to adjust language and locale:
       <pre class="command_user">sudo setup-nutyx -cl</kbd></pre>
       <p>
         <img src="graphics/nutyx-man/SelectLanguage.png">
       <p>
        The file <b>/etc/profile.d/i18n.sh</b> defines the language of the user interface.
       <p>
        The link <b>/etc/localtime</b> defines your time zone.
       <p>
        To find out the various possibilities for Europe, for example, use the command:
        <pre class="command"><kbd>ls /usr/share/zoneinfo/Europe</kbd></pre>
        Then adjust the link to match the city closest to your location. For example, the command:
        <pre class="command"><kbd>sudo ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime</kbd></pre>
        will define Rome as city of your region.

    <li><h3>The keyboard</h3></li>
       <p>
        The command to select your keyboard:
        <pre class="command_user">sudo setup-nutyx -ck</kbd></pre>
       <p>
        <img src="graphics/nutyx-man/SelectKeyboard.png">
        The file <b>/etc/sysconfig/console</b> defines the configuration of the keyboard when you are not in graphical mode.
       <p>
        Here is an example of a console configuration:
        <pre class="output"><kbd>FONT="LatGrkCyr-8x16"
UNICODE="1"
LOGLEVEL=1
KEYMAP=fr_CH-latin1.map</kbd></pre>
        The FONT variable defines the font that will be used.
        The UNICODE variable specifies the use of utf8 coding.
        LOGLEVEL defines the level of verbosity during the booting process (1 for least verbose, 7 for most).
        KEYMAP defines the keyboard mapping.
        All available keyboard maps are listed in the folder <b>/lib/kbd/keymaps/i386/</b>.
        Available fonts are listed in the folder <b>/lib/kbd/consolefonts/</b>.
       <p>
        The file <b>/etc/X11/xorg.xonf.d/20-keyboard.conf</b> does the same thing for your graphical keyboard.
        This is a wide subject; please use the Xorg main page for further information on how to configure it.
        You will also find a lot of examples on the Internet.

     <li><h3>Setting date and time</h3></li>
     <p>
      The command for setting up the date and time:
      <pre class="command_user">sudo setup-nutyx -cc</kbd></pre>
     <p>
      <p>
       <img src="graphics/nutyx-man/ConfigureUTC.png">
      <p>
       <img src="graphics/nutyx-man/ConfigureDate.png">
      <p>
       <img src="graphics/nutyx-man/ConfigureTime.png">

     <li><h3>Creating a new user account</h3></li>
      The command to add a new user on your system:
     <pre class="command_user">sudo setup-nutyx -cu</kbd></pre>
     <p> 
      <img src="graphics/nutyx-man/AddUser.png">
     <p>
      <img src="graphics/nutyx-man/AddUserDescription.png">
     <p>
      <img src="graphics/nutyx-man/NewPassword.png">
     <p>
      <img src="graphics/nutyx-man/ConfirmNewPassword.png">
     <p>
      If you wish to activate the autologin behaviour, edit <b>/etc/lxdm/lxdm.conf</b> file.
     <p>
      The more basic commands <b>useradd/userdel</b> can also be used to add/delete user accounts.


   <li><h3>The network</h3></li>
    <p>
     <h4>Automatic configuration via DHCP</h4>
      <p>
       The command below will configure you network:
       <pre class="command_user">sudo setup-nutyx -cn</kbd></pre>
      <p> 
       <img src="graphics/nutyx-man/SelectNetworkCard.png">
      <p>
       <img src="graphics/nutyx-man/SelectDHCP.png">

      <h4>Manual Configuration</h4>
        The command below will configure you network:
       <pre class="command_user">sudo setup-nutyx -cn</kbd></pre>
      
       <img src="graphics/nutyx-man/SelectNetworkCard.png">
       <p>
        <img src="graphics/nutyx-man/SelectManNetworkConfig.png">
       <p>
        <img src="graphics/nutyx-man/EnterIPAdress.png">
       <p>
        <img src="graphics/nutyx-man/EnterBroadAdress.png">
       <p>
        <img src="graphics/nutyx-man/EnterSubNet.png">
       <p>
        <img src="graphics/nutyx-man/EnterGateway.png">
       <p>
        <img src="graphics/nutyx-man/EnterDNS.png">
       <p>
        <img src="graphics/nutyx-man/EnterDomain.png">
       <p>
        The file <b>/etc/sysconfig/network</b> contains all the network information.
        <pre class="output"><kbd>HOSTNAME='nutyx'        # Hostname of this machine
MANAGER=''              # Network manager (wicd/networkmanager/cli/nothing)
NETWORKWAIT='no'        # Wait or not for network
LINKDELAY='15'          # init delay for initialisation of Networkmanager
NETWORKDELAY='0'        # init delay to wait after initialisation of Networkmanager</kbd></pre>

          The script taking care of the network will adapt by checking which application is installed.
         <p>
          If <b>wicd</b> is found, the wicd service will be started; if <b>networkmanager</b> is found, the networkmanager service will be started.
         <p>
          If both applications are installed, <b>networkmanager</b> is started preferentially.
         <p>
          If neither is found, the cli script will be started.
         <p>
          For a static address configuration, it is necessary to specify the address of your DNS servers manually.
          For example, if you wish to use the google DNS servers, put this in the file <b>/etc/resolv.conf</b>:

<pre class="output"><kbd>nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
</kbd></pre>
         <p>
          You can often use the address of your router, as most routers are also DNS servers.

   <h4>Define a wireless network and  activate the wpa key</h4>
    <p>
     If your computer support wireless access, you can now configured it:
    <p>
     The command below will setup the wireless network
      <pre class="command_user">sudo setup-nutyx -cw</kbd></pre>
       <img src="graphics/nutyx-man/EnterESSID.png">
       <p>
        <img src="graphics/nutyx-man/EnterESSIDPassword.png">
    <p>
   <p>
    If you wish to do all by hand, here's how to proceed:
   <p>
    To know the name of the network card, use the command (as root): <pre class="command"><kbd>iwconfig</kbd></pre> 
    If the result is something like:
    <pre class="output">eth0       no wireless extensions.

eth1       IEEE 802.11abg 
           Mode:Managed  Frequency:2.417 GHz  Access Point: C4:3D:C7:9F:D0:CF
           Tx-Power=200 dBm
           Retry  long limit:7   RTS thr:off   Fragment thr:off
           Encryption key:off
           Power Management:off</pre>
    <p>
     In the example above, the eth1 card supports WiFi.
    <p>
     We just have to provide the configuration file which will be used by the network connection.
    <p>
     <b>ATTENTION:</b> it is important to name the configuration file correctly so that the script can find it.
    <p>
     In this example, the name of the card is <b>eth1</b>, the name of the WiFi network is <b>casabianca</b> and the access key will be <b>Gg6!-@1234</b>.
     From this information, we created this configuration file:

     <pre class="command"><kbd>wpa_passphrase "<b>casabianca</b>" "<b>Gg6!-@1234</b>" &gt; /etc/wpa_supplicant.conf.eth1</kbd></pre>
    <p>
     Then we add the configuration file as explained in the manual under the configuration section.
    <p>
     In this example, we have to create the file <b>/etc/sysconfig/ifconfig.eth1</b>.
    <p>
     Once this is done, you can restart the network by restarting the service:
<pre class="command"><kbd>/etc/rc.d/init.d/network restart</kbd></pre>
     Make sure you adjust the definition of the variable <b>MANAGER</b> as defined in the file <b>/etc/sysconfig/network</b>.
    <p>
     The management of the network service can be done through the command line.
     The value of the variable is then <b>cli</b>.
     If you want to use wicd, put <b>wicd</b> as a value;
     if networkmanager (which comes with the 'mate' graphical interface), then put <b>networkmanager</b>.

      <li><h3>Setting the name of your computer</h3></li>
       <p>
        The file <b>/etc/hostname</b> defines the name of the local machine.
       <p>
        it's containing the name of your machine.
       <p>
        Example: 
       <pre class="output">nutyx</pre>

      <li><h3>Configuring the boot process</h3></li>
       <p>
        If you used an ISO image to install NuTyX and you installed GRUB as your bootloader,
        its configuration file is located in <b>/boot/grub/grub.cfg</b>.
       <p>
        The name of the NuTyX kernel file is <b>kernel</b>, and the name of the initrd is <b>initrd</b>.
       <p>
        Both files are located in the <b>/boot</b> folder.
       <p>
        In the following example, NuTyX is installed on the first partition of the second hard drive and grub is installed on the first hard drive.
       <p>
        The configuration file will be:
       <pre class="output">menuentry "NuTyX 21.10.0" {
  set root=(hd1,1)
  linux /boot/kernel root=/dev/sdb1 ro quiet 3
  initrd /boot/initrd
  }</pre>
       <p>
        If we want to have an extra entry for maintenance, the entry will look like:
        <pre class="output">menuentry "NuTyX maintenance" {
  set root=(hd1,1)
  linux /boot/kernel ro quiet 3
  initrd /boot/initrd
  }</pre>
       <p>
        Note that this entry doesn't have the option <b>root=/dev/sdb1</b> so the root partition will not be mounted.
        This would allow you to carry out maintenance tasks on this partition.
       <p>
        If the bootloader is not yet installed, (for example because you installed NuTyX from a script rather than from an ISO image),
        you can install grub separately by specifying <b>the disk</b> on which which the NuTyX partition is located.
        In our example below, we will use the following command:
        <pre class="command"><kbd>sudo grub-install /dev/sdb</kbd></pre>
       <p>
        Ajust according your settings

   <li><h3>Adding a partition, a disk or a NFS shared folder</h3></li>
    <div class="note"><img alt="[NOTE IMPORTANT]" src="../graphics/note.gif"/>
     If you have already defined the user(s) on this machine
     and wish to mount their <b>/home</b> folder (which contains the users personal files)
     on a separate partition/disk/NFS folder, it is important to back up the existing contents of this folder first.
    <p>
     There are several ways of doing this. Whichever way you use, make sure you are logged in as root and that the X server is not running.
    </div>
    <p>
     As root, type the following commands:
     <pre class="command"><kbd>init 3
sync
cd /home
tar cf /root/users.tar *</kbd></pre>
    <p>
     If everything went well (no error messages), you can erase the folders, still as root
     <pre class="command"><kbd>cd /home
rm -r *</kbd></pre>
    <p>
     The <b>home</b> folder is now empty and ready to become a mount point for the real home partition.
    <p>
     The file <b>/etc/fstab</b> defines the mount points of partition devices when the machine boots up.
    <p>
     You will probably want to use a partition or a disk or even a NFS folder to store the personal data of the registered users on this machine.
    <p>
     In our example, GRUB is on the first partition, NuTyX rootfs is on the second partition, the swap partition is the third.
    <p>
     The file <b>/etc/fstab</b> of our example initially contains the following information:
     <pre class="output"># file/device   mountpoint  type      options    dump fsck order
...
/dev/sda1       /boot       ext2      defaults     0        0
/dev/sda2       /           reiserfs  defaults     0        1
/dev/sda3       swap        swap      pri=1        0        0</pre>
    <p>
     We wish to add the <b>second</b> partition (formatted as <b>ext4</b>) of the <b>second disk</b> to be installed on the mount point <b>/home</b>.
     We need to add the following line:
     <pre class="command"><kbd>echo "/dev/sdb2  /home  ext4     defaults   0   0" &gt;&gt; /etc/fstab</kbd></pre>
     <p>
      To add a NFS folder <b>/srv</b> located on a remote server with the IP address 192.168.254.254
      to the mounting point <b>/server</b>, we add the following line:
     <pre class="command"><kbd>cat "192.168.254.254:/srv /server  nfs  rw,vers=3,_netdev,rsize=8192,wsize=8192   0   0" \
&gt;&gt; /etc/fstab</kbd></pre>
    <p>
     Once this is done, you can activate the mount points using the command:
     <pre class="command"><kbd>mount -a</kbd></pre>
    <p>
     The folder <b>/server</b> must have been created earlier on your local machine.
     The values of rsize and wsize have the default values.
     Feel free to experiment with your own values for these.
     Make sure the package <b>nfs-utils</b> and the associated services are launched.
     Note that the version 3 of NFS has been chosen.
    <p>
     You should not see any error messages during the mount operation. You can check the result by using the command:
     <pre class="command"><kbd>mount</kbd></pre>
     it should return something like this:
     <pre class="output">...
/dev/sdb2 on /home type ext4 (rw)
192.168.254.254:/srv on /server type nfs (rw,vers=3,rsize=8192,wsize=8192,addr=192.168.254.254)
...</pre>
    <p>
     It is now time to restore the content of the <b>/home</b> folder.
    <p>
     This assumes that some users are already created and you choose to mount the <b>/home</b> folder:
     <pre class="command"><kbd>cd /home
tar xf /root/users.tar</kbd></pre>
    <p>
     You can now switch back to graphical mode and login as a normal user.


  <li><h3>Adding a swap partition or a swap file</h3></li>
     The command <b>fdisk</b> lets you modify the organisation of your disk(s).
    <p>
     If you have less than 1 GB of RAM (for a 32-bit system) or less than 4 GB (for a 64-bit one), you definitely should create a swap partition.
    <p>
     If there is no space for another partition, you can still create a swap <i>file</i> and mount it automatically at boot.
    <p>
     We first create a file big enough (here +/- 500 MB):
     <pre class="command"><kbd>dd if=/dev/zero of=/SWAP bs=1024 count=500000</kbd></pre>
    <p>
     A file named <b>SWAP</b> of 512Mbytes is created in the root directory of the filesystem.
    <p>
     Next we format it and make it active:
     <pre class="command"><kbd>mkswap /SWAP
swapon /SWAP</kbd></pre>
    <p>
     Finally we add an entry for it in the <b>/etc/fstab</b>:
     <pre class="command"><kbd>echo "/SWAP     swap       swap     pri=1       0        0" &gt;&gt; /etc/fstab</kbd></pre>


      <li><h3>Manual loading of the kernel modules</h3></li>
       <p>
        A module is a piece of code used by the kernel which can be loaded while the machine is running.
       <p>
        The command:
        <pre class="command"><kbd>lsmod</kbd></pre> lists all the currently loaded modules.
       <p>
        The command:
        <pre class="command"><kbd>modprobe-v module</kbd></pre> manually loads the module <b>module</b> into the kernel.
       <p>
        The command:
        <pre class="command"><kbd>rmmod -v module</kbd></pre> unloads <b>module</b> from the kernel.<p>
      <h4>Deactivate the loading of a module (blacklist).</h4>
        Sometimes it is necessary to blacklist a module that is causing problems,
        to prevent it from being loaded automatically.
       <p>
        The folder <b>/etc/modprobe.d</b> contains all the files that specify modules to blacklist.
       <p>
        File syntax example, the file <b>/etc/modprobe.d/ati.conf</b> contains:
       <pre class="output">blacklist radeon</pre>
      <li><h3>Modify/Create folders/files at booting</h3></li></ul>
      <p>
       The file <b>/etc/sysconfig/createfiles</b> specifies files and/or folders that need to be created or modified automatically when the machine starts.
      <p>
       It is unlikely that you will need to adjust these.
     
 <h2>BINARY PACKAGE MANAGEMENT (REMOTE)</h2>
  <ol><li><h3>Configuration of cards</h3></li>
   <p>
    The file <b>/etc/cards.conf</b> defines the behavior of the <b>cards</b> package manager.
   <p>
    Each line in this file is a &lt;variable&gt; &lt;value&gt; pair
   <li><h3>Commands to know</h3></li></ol>
    <p>
     The <b>cards</b> command has a lot of possible options.
     Only a few are listed here.
    <p>
     To get complete help information, use the command:
     <pre class="command"><kbd>cards help</kbd></pre>
    <p>
     Any options that modify your installation must be used from the administrator (root) account or via the <b>sudo</b> command.
    <p>
     Synchronisation, to check the available updates.
     <pre class="command"><kbd>check</kbd></pre>
     or
     <pre class="command"><kbd>sudo cards sync -i</kbd></pre>
    <p>
     Installing package(s) 
     <pre class="command"><kbd>get packageX .. packageY</kbd></pre>
     or
     <pre class="command"><kbd>sudo cards install packageX .. packageY</kbd></pre>
    <p>
     Uninstalling a package
     <pre class="command"><kbd>del packageX</kbd></pre>
     or
     <pre class="command"><kbd>sudo cards remove paquetX</kbd></pre>
    <p>
     Updating of the X package.
     Note that all the dependencies will be updated if necessary.
     <pre class="command"><kbd>up paquetX</kbd></pre>
     or
     <pre class="command"><kbd>sudo cards install -u packageX</kbd></pre>
    <p>
     Searching for a string in the name or description of the available packages.
     <pre class="command"><kbd>search &lt;string&gt;</kbd></pre>
     or
     <pre class="command"><kbd>sudo cards search &lt;string&gt;</kbd></pre>
    <p>
     Print out a list of out-of-date packages.
     <pre class="command"><kbd>sudo cards diff -i</kbd></pre>

 <h2>BINARY PACKAGE MANAGEMENT (LOCAL) (for advanced users)</h2>
  <p>
   To manage local binary packages, we use the commands <b>pkgadd, pkgrm,</b> and <b>pkginfo</b>.
  <p>
   These commands modify your installation, so they need root access.(su -)
  <p>
   To get access to thoses commands, you need to install the <b>cards.devel</b> package:
   <pre class="command"><kbd>get cards.devel</kbd></pre>
   <ol>
    <li><h3>Configuration of pkgadd</h3></li>
     <p>
      The file <b> /var/lib/pkg/pkgadd.conf </b> defines the installation and upgrade rules for binary packages.
     <p>
      It contains three columns: EVENT, PATTERN and ACTION. The EVENT column describes the type of situation to which this rule applies.
     <p>
      Currently there are two types of events: UPGRADE and INSTALL.
      UPGRADE rules are applied when a package is installed over an existing version.
      INSTALL rules  are applied in all cases.
     <p>
      The pattern is a regular expression representing a class of files.
     <p>
      The action applicable to both the UPGRADE and INSTALL event is YES and NO.
     <p>
      More than one rule of the same event type is allowed, in which case the first rule will have the lowest priority and the last rule will have the highest priority.
     <p>
      Example:
      <pre class="output">UPGRADE         ^etc/.*$                NO
UPGRADE         ^var/log/.*$            NO
UPGRADE         ^etc/X11/.*$            YES
UPGRADE         ^etc/X11/XF86Config$    NO</pre>
     <p>
      The above example will prevent pkgadd from upgrading anything in /etc/ or /var/log/ (subdirectories included), except files in /etc/X11/ (subdirectories included).
     <p>
      However the file /etc/X11/XF86Config is not to be updated.
     <p>
      The default rule is to  upgrade/install everything, rules in this file are exceptions to that rule.
     <p>
      (NOTE! A pattern should never contain an initial "/" since you are referring to the files in the package, not the files on the disk.)
     <p>
      If pkgadd finds that a specific file should not be upgraded it will install it under <b>/var/lib/pkg/rejected/</b>.
     <p>
      The user is then free to examine/use/remove that file manually.
    <li><h3>Commands to knows</h3></li></ol>
     <p>
      Install a local package
      <pre class="command"><kbd>sudo pkgadd /path/to/package</kbd></pre>
     <p>
      Upgrade a local package
      <pre class="command"><kbd>sudo pkgadd -u /path/to/package</kbd></pre>
     <p>
      Delete the package silently
      <pre class="command"><kbd>sudo pkgrm package</kbd></pre>
     <p>
      List all the installed packages
      <pre class="command"><kbd>pkginfo -i</kbd></pre>
     <p>
      List the file list of a package
      <pre class="command"><kbd>pkginfo -l package</kbd></pre>
     <p>
      Find out the owner of a filename
      <pre class="command"><kbd>pkginfo -o FileName</kbd></pre>
     <p>
      Find out details of a package
      <pre class="command"><kbd>pkginfo -d package</kbd></pre>

 
 <h2>PACKAGE MANAGEMENT USING PORTS WITH DEPENDENCY MANAGEMENT (for advanced users)</h2>
  <p>
   The management of recipes for packages and their dependencies is carried out using the <b>cards</b> command as well.
   <ol><li><h3>cards configuration</h3></li>
    <p>
     As mentioned above, the <b>/etc/cards.conf</b> file defines rules for this command.
    <p>
     The line <b>dir /var/lib/pkg/depot/...</b> is very important for ports management.
    <p>
     The order defines the order in which directories will be searched for recipes.
    <p>
     If a recipe is available in two directories, the first one listed will always be used.
  <li><h3>Commands you need to know</h3></li></ol>
   <p>
    List dependencies of a package and see if they are installed.
    <pre class="command"><kbd>cards deptree package</kbd></pre>
   <p>
    Check if package is available
    <pre class="command"><kbd>cards search package</kbd></pre>
   <p>
    Search a package with the description
    <pre class="command"><kbd>cards info -p package</kbd></pre>
   <p>
    Build and install a port (needs root access)
    <pre class="command"><kbd>cd /var/lib/pkg/depot/&lt;collection&gt;/packageX && pkgmk -d -i</kbd></pre>
   <p>
    Download, build and install the package in one single command
    <pre class="command"><kbd>sudo cards create -n packageX</kbd></pre>
    Download, build and install the package. Its dependencies MUST be already available. They will not be compiled.<p>

 <h2>SERVICES</h2>
  <p>
   Various service packages are available for installation under the name &lt;nameoftheservice&gt;.service.
  <p>
   The command <b>cards search service</b> will printout the list of all available service packages.
  <p>
   Once installed, their start-up scripts (cups, gdm, sshd, etc...) can be found in the <b>/etc/rc.d/init.d</b> directory
  <p>
   Example: Starting the X service
   <pre class="command"><kbd>/etc/rc.d/init.d/Xservice start</kbd></pre>
  <p>
   Stopping the X service
   <pre class="command"><kbd>/etc/rc.d/init.d/Xservice stop</kbd></pre>
  <p>
   Restarting the service (this option is not available for all services).
   <pre class="command"><kbd>/etc/rc.d/init.d/Xservice restart</kbd></pre>

 <h2>IN CASE OF PROBLEMS</h2>
     <p>
      If you run into a problem, Linux automatically produces a variety of log files which can provide useful information.
     <p>
      There is a record of the boot process in <b>/var/log/boot.log</b> and more complete system messages in <b>/var/log/sys.log</b>.
     <p>
      A record of the last start-up of the X server is in the file <b>/var/log/Xorg.0.log</b>.
     <p>
      Most of the services have there own logs.If you have a ssh connection problem, some info will be found in the file <b>/var/log/auth.log</b> of the ssh server.
     <p>
      To find out about installed binary packages, check the file <b>/var/log/cards.log</b>.

 <h2>ONLINE HELP</h2>
    <p>
     <b>IRC:</b> join the chat room <b>#nutyx</b> on the irc.freenode.net (utf-8) network
    <p>
     <b>WEB site:</b> http://www.nutyx.org


 <h2>FILES</h2>
Here are listed the configuration files mentioned in this manual. You may like to study them for yourself.
   <p>
    <pre class="output"><b>/etc/cards.conf,
/etc/pkgmk.conf,
/etc/sysconfig/console,
/etc/sysconfig/clock,
/etc/sysconfig/network,
/etc/wpa_supplicant.conf.*,
/etc/sysconfig/ifconfig.*,
/boot/grub/grub.cfg,
/etc/fstab,
/etc/profile.d/i18n.sh,
/var/lib/pkg/nutyx-version,
/var/lib/pkg/pkgadd.conf</b></pre>
  <h2>AUTHORS</h2>
    <p>
     Thierry Nuttens

 <h2>SEE ALSO</h2>
man pages of
    <pre class="output">nutyx(8), cards(8), pkgmk(8) pkgadd(8),
cards.conf(5), pkgmk.conf(5), pkgrm(8), pkginfo(8), modprobe(8), modprobe.conf(5),
useradd(8), userdel(8)</pre>

 <h2>COPYRIGHT</h2>
    <pre class="output">
Copyright (C) 2013 - 2021 Thierry Nuttens

This free document is published under the free license WTFPL - Do What The F*** You Want To Public License.
( http://www.wtfpl.net/ ) </pre>
  </ol>
