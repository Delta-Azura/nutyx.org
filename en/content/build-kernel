  <h1>How to compile and install your own kernel</h1>
   <h2>Introduction</h2>
    <p>
     This topic can be applied to any distribution and not only to NuTyX.
    <p>
     It explains how to compile and install a customized kernel, should you  wish to do so.  
    <p>
     They are many reasons to compile your own kernel.
     One good reason could be to reduce the size of the kernel as much as possible and optimize it for your own hardware.
     This will greatly speed up the boot process.
    <p>
     If you are using NuTyX, make sure you get devel packages set:
     <pre class="command_user"><kbd>get cards.devel</kbd></pre>
   <h2>Checking the hardware</h2>
    <p>
     We start by checking what kind of hardware we are running on:
    <pre class="command_user"><kbd>lspci</kbd></pre>
    <pre class="output">00:00.0 Host bridge: Intel Corporation Atom Processor D2xxx/N2xxx DRAM Controller (rev 03)
00:02.0 VGA compatible controller: Intel Corporation Atom Processor D2xxx/N2xxx Integrated Graphics Controller (rev 09)
00:1b.0 Audio device: Intel Corporation NM10/ICH7 Family High Definition Audio Controller (rev 02)
00:1c.0 PCI bridge: Intel Corporation NM10/ICH7 Family PCI Express Port 1 (rev 02)
00:1c.1 PCI bridge: Intel Corporation NM10/ICH7 Family PCI Express Port 2 (rev 02)
00:1c.2 PCI bridge: Intel Corporation NM10/ICH7 Family PCI Express Port 3 (rev 02)
00:1d.0 USB controller: Intel Corporation NM10/ICH7 Family USB UHCI Controller #1 (rev 02)
00:1d.1 USB controller: Intel Corporation NM10/ICH7 Family USB UHCI Controller #2 (rev 02)
00:1d.2 USB controller: Intel Corporation NM10/ICH7 Family USB UHCI Controller #3 (rev 02)
00:1d.3 USB controller: Intel Corporation NM10/ICH7 Family USB UHCI Controller #4 (rev 02)
00:1d.7 USB controller: Intel Corporation NM10/ICH7 Family USB2 EHCI Controller (rev 02)
00:1e.0 PCI bridge: Intel Corporation 82801 Mobile PCI Bridge (rev e2)
00:1f.0 ISA bridge: Intel Corporation NM10 Family LPC Controller (rev 02)
00:1f.2 SATA controller: Intel Corporation NM10/ICH7 Family SATA Controller [AHCI mode] (rev 02)
00:1f.3 SMBus: Intel Corporation NM10/ICH7 Family SMBus Controller (rev 02)
01:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8101E/RTL8102E PCI Express Fast Ethernet controller (rev 05)                                                       
02:00.0 Network controller: Broadcom Corporation BCM4313 802.11b/g/n Wireless LAN Controller (rev 01)                                                                              
03:00.0 Unassigned class [ff00]: Realtek Semiconductor Co., Ltd. RTS5209 PCI Express Card Reader (rev 01)</pre>
    <p>
     What we see here:
     <ul>
      <li>Processor: Intel Atom</li>
      <li>Audio device: Intel</li>
      <li>SATA controller: Intel</li>
      <li>Network card: Realtek RTL8101E/RTL8102E</li>
      <li>Graphics card: Intel Atom Processor D2xxx/N2xxx</li>
     </ul>
  <h2>Download the sources of the kernel</h2>
   <p>
    To be able to compile a kernel, we need the sources of a kernel version.
    At the time of writing, version 3.17.4 is available.
    We will therefore compile this version...
   <p>
    Open a terminal and type the command:
   <pre class="command_user"><kbd>wget http://www.kernel.org/pub/linux/kernel/v3.x/linux-3.17.4.tar.xz</kbd></pre>
   <p>
    The sources are downloaded into your personnal folder.
   <pre class="output">--2012-09-01 17:49:53--  http://www.kernel.org/pub/linux/kernel/v3.0/testing/linux-3.17.4.tar.xz
Resolving www.kernel.org... 149.20.4.69, 149.20.20.133
Connecting to www.kernel.org|149.20.4.69|:80...connected.
HTTP request sent, awaiting response...200 OK
Size: 82259123 (78M) [application/x-bzip2]
Saved in : &laquo;linux-3.17.4.tar.bz2&raquo;

100%[=============================&gt;] 82.259.123  2,55M/s   ds 37s     

2012-09-01 17:50:31 (2,13 MB/s) - &laquo;linux-3.17.4.tar.xz&raquo; saved [82259123/82259123]</pre>
     
  <h2>Extract the sources from the downloaded kernel</h2>
   <p>
    We extract the sources from our new downloaded kernel:
   <pre class="command_user"><kbd>tar xf linux-3.17.4.tar.xz</kbd></pre>
   <p>
    After a few moments, a new prompt will come up and the sources are in place.
    To be able to compile the kernel, we need to be in the kernel directory.

  <h2>Go to the sources directory</h2><p>
 Type in your terminal:
   <pre class="command_user"><kbd>cd linux-3.17.4</kbd></pre>
   <p>
    We are now ready to launch the magic commands.
   <p>
    As a start, I recommend you to consult all the possible options in the compilation:
   <pre class="command_user"><kbd>make help|more</kbd></pre>
   <p>
    It will give you ALL the possible options for compile the kernel and its modules.
   <pre class="output">Cleaning targets:
  clean           - Remove most generated files but keep the config and
                    enough build support to build external modules
  mrproper        - Remove all generated files + config + various backup files
  distclean       - mrproper + remove editor backup and patch files

Configuration targets:
  config          - Update current config utilising a line-oriented program
  nconfig         - Update current config utilising a ncurses menu based program
  menuconfig      - Update current config utilising a menu-based program
  xconfig         - Update current config utilising a QT based front-end
  gconfig         - Update current config utilising a GTK based front-end
  oldconfig       - Update current config utilising a provided .config as base
  localmodconfig  - Update current config disabling modules not loaded
  localyesconfig  - Update current config converting local mods to core
  silentoldconfig - Same as oldconfig, but quietly, additionally update deps
  defconfig       - New config with default from ARCH supplied defconfig
  savedefconfig   - Save current config as ./defconfig (minimal config)
  allnoconfig     - New config where all options are answered with no
  allyesconfig    - New config where all options are accepted with yes
  allmodconfig    - New config selecting modules when possible
  alldefconfig    - New config with all symbols set to default
  randconfig      - New config with random answer to all options
  listnewconfig   - List new options
  oldnoconfig     - Same as silentoldconfig but sets new symbols to their default value

......
....</pre>
    <p>
     That's just the beginning of the list! <img src="../graphics/smiley-wink.gif" alt="Wink" title="Wink">.
     Let's start by making sure that the sources are clean and don't contain any compiled parts.
    <div class="note"><img src="../graphics/note.gif" width="10" height="10" alt="*" />
     This command needs to be carried out only once.
     After the first build, you can skip this command if you need to recompile the kernel.
    </div>
   <pre class="command_user"><kbd>make mrproper</kbd></pre>
   <p>
    There should be no messages printed.
    We will now lanch the configuration tool and activate as few options as possible for our working kernel.
    I choose the non-graphical interface on purpose, so that you can do it in a chroot, a graphical terminal or a normal terminal.
   <h2>Configure the compilation options</h2>
    <p>
     The LFS team recommand unsetting the variable LC_ALL :
    <pre class="command_user"><kbd>LC_ALL= make menuconfig</kbd></pre>
    <p>
     You are now in the main menu of the configuration tool of the kernel:
    <p>
     <img src="../graphics/build-kernel/menuprincipal.png" alt="Configuration menu principal" title="Main menu" width="578" height="517" /> 
    <p>
     In this article, I choose only the options which are needed for a successful boot.
     It means that the number of modules will be very small.
     You have to know that a generic kernel contains more then 5000 modules.
    <p>
     Go through all the menus and activate only the options which are recommended below:
    <div style="font-size:120%"><b>General Setup</b></div>
    <table>
     <tr class="odd"><td>
      Kernel compression mode (Gzip)
     </td>
     </tr>
     <tr class="even"><td>
      (NuTyX) Default hostname
      </td>
     </tr>
     <tr class="odd"><td>
      Support for paging of anonymous memory
      </td>
     </tr>
     <tr class="even"><td>
      System V IPC
      </td>
     </tr>
     <tr class="odd"><td>
      POSIX Message Queues
      </td>
     </tr>
     <tr class="even"><td>
      (18) Kernel log buffer size
      </td>
     </tr>
     <tr class="odd"><td>
      Namespaces support
      </td>
     </tr>
    </table>
   <div>
     <div style="font-size:120%"><b>Enable loadable module support</b></div>
   </div>
   <div>
     <div style="font-size:120%"><b>Enable the block layer</b></div>
   </div>
    <table>
     <tr class="odd"><td style="width:20%;">
      IO Schedulers ---></td><td>CFQ I/O scheduler
      </td>
     </tr>
     <tr class="even"><td></td><td>
      Default I/O scheduler (CFQ)
      </td>
     </tr>
    </table>
   <div>
     <div style="font-size:120%"><b>Processor type and features</b></div>
   </div>
    <table>
     <tr class="odd"><td>
      Processor family (Atom) Adjust acording to your  microprocessor
     </td>
     </tr>
     <tr class="even"><td>
      High Memory Support (4GB)
     </td>
     </tr>
     <tr class="odd"><td>
      Memory model (Flat Memory))
     </td>
     </tr>
     <tr class="even"><td>
      (4096) Low address space to protect from user allocation
     </td>
     </tr>
     <tr class="odd"><td>
      (64) Amount of low memory, in kilobytes, to reserve for the BIOS
     </td>
     </tr>
     <tr class="even"><td>
      (0x2000000) Alignment value to which kernel should be aligned
     </td>
     </tr>
    </table>
     
    <div style="font-size:120%"><b>Power management and ACPI options</b></div>
    <div style="font-size:120%"><b>Bus options (PCI,etc)</b></div>
     
    <table>
     <tr class="odd"><td>
       PCI Support</td><td>PCI access mode (Any)
      </td>
     </tr>
    </table>
   <div>
     <div style="font-size:120%"><b>Executable file formats / Emulations</b></div>
   </div>
    <table>
     <tr class="odd"><td style="width:35%;">
       Kernel support for ELF binaries
      </td>
     </tr>
    </table>
   <div>
     <div style="font-size:120%"><b>Networking support</b></div>
   </div>
    <table>
     <tr class="odd">
      <td style="width:35%;">
       Networking options
      </td>
      <td>
       Packet socket
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Unix domain socket
      </td>
     </tr>
     <tr class="odd"><td></td><td>
       TCP/IP networking
      </td>
     </tr>
    </table>
   <div>
     <div style="font-size:120%"><b>Device Drivers</b></div>
   </div>
    <table>
     <tr class="odd">
      <td style="width:20%;">
       Generic Driver Options
      </td>
      <td>
       Maintain a devtmpfs filesystem to mount at /dev
      </td>
     </tr>
     <tr  class="even">
      <td></td>
      <td>
       Automount devtmpfs at /dev, after the kernel mounted the rootfs
      </td>
     </tr>
     <tr class="odd">
      <td></td>
      <td>
       Userspace firmware loading support
      </td>
     </tr>
     <tr class="even">
      <td>
       Block devices
       </td>
      <td></td>
     </tr>
     <tr class="odd">
      <td>
       SCSI device support
      </td>
      <td>
       SCSI device support
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       legacy /proc/scsi/ support
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       SCSI disk support
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       SCSI generic support
      </td>
     </tr>
     <tr class="odd">
      <td>
       Serial ATA and Parallel ATA Drivers
      </td>
      <td>
       ATA ACPI support
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       AHCI SATA support
      </td>
     </tr>
     <tr class="odd">
      <td>
       Network device support
      </td>
      <td>
       Network core driver support
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Ethernet driver support
      </td>
      <td>
       Realtek devices
      </td>
      <td>
       Realtek RTL-8139 C+ PCI Fast Ethernet Adapter support (Adjust according your network card)
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
      </td>
      <td>
      </td>
      <td>
       Realtek RTL-8129 PCI Fast Ethernet Adapter support
      </td>
     </tr>
     <tr class="odd">
      <td>
       Input device support
      </td>
      <td>
       Generic input layer (need for keyboard, mouse ..)
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Mouse interface
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       Provide legacy /dev/psaux device
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       (1024) Horizontal screen resolution
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       (768) Vertical screen resolution
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Event interface
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       Keyboards
      </td>
      <td>
       AT keyboard
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Mice
      </td>
      <td>
       PS/2 mouse
      </t>
     </tr>
     <tr class="odd">
      <td>
       </td>
        <td>
         Miscellaneous devices
        </td>
        <td>
         User level driver support
        </td>
     </tr>
     <tr class="even">
      <td>
       USB support
      </td>
      <td>
       Support for Host-side USB
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       USB announce new devices
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Enable USB persist by default
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       xHCI HCD (USB 3.0) support
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       EHCUI HCD (USB 2.0) support
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       Root Hub Transaction Translators
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       Improved Transaction Translator scheduling
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       Generc EHCI driver for a platform device
      </td>
     </tr>
     <tr class="even">
      <td>
      </td>
      <td>
       UHCI HCD (most Intel and VIA) support
      </td>
     </tr>
     <tr class="odd">
      <td>
      </td>
      <td>
       USB Mass Storage support
      </td>
     </tr>
    </table>
     
    <div style="font-size:120%"><b>Firmware Drivers</b></div>
    <div style="font-size:120%"><b>File systems</b></div>
   
    <table>
     <tr class="odd">
      <td>
       The Extended 3 (ext3) filesystem (Adjust according your file system)
      </td>
     </tr>
     <tr class="even">
      <td>
       Ext3 POSIX Access Control Lists
      </td>
     </tr>
     <tr class="odd">
      <td>
       Ext3 Security Labels
      </td>
     </tr>
    </table>
     
    <div style="font-size:120%"><b>Kernel hacking</b></div>
     
    <table>
     <tr class="odd">
      <td>
       Early printk
      </td>
     </tr>
    </table>
     
    <div style="font-size:120%"><b>Security options</b></div>
     
    <div style="font-size:120%"><b>Cryptographic API</b></div>
   
    <table>
     <tr class="odd">
      <td>
       AES cipher algorithms
      </td>
     </tr>
    </table>
     
    <div style="font-size:120%"><b>Virtualization</b></div>
   
    <div style="font-size:120%"><b>Library routines</b></div>
   
    <table>
     <tr class="odd">
      <td>
       CRC32/CRC32c functions
      </td>
     </tr>
    </table> 
    <p>
     Once you have completed your selections, choose the option <span style="color: #ff0000;">Exit</span> repeatedly until you are back at the prompt.
    <p>
     A new message will ask you if you want to save your configuration; choose the default option <span style="color: #ff0000;">Yes</span>.
    <p>
     A nice message in your terminal will appear and tell you <img src="../graphics/smiley-cool.gif" border="0" alt="Cool" title="Cool" />:
   <pre class="output">#
# configuration written to .config
#


<b>* End of the configuration.
*</b> Execute 'make' to start the build or try 'make help'</pre>

  <h2>Compile the kernel</h2>
   <p>
    The actual compiling of your kernel can now start.
    Type in your terminal:
   <pre class="command_user"><kbd>make -j4</kbd></pre>
   <p>
    The compilation starts.
    If you have more processors or fewer, adjust the value <b>-j4</b> to the number of cores you have.
   <p>
    <img src="../graphics/build-kernel/Compile.png" border="0" alt="Compilation en cours" width="578" height="517" />
   <p>
    A few minutes (or hours) later, ... You have a kernel ready to be used.    
   <pre class="output">Kernel: arch/x86/boot/bzImage is ready  (#1)</pre>

  <h2>Create a new entry in the grub.cfg or menu.lst file</h2>
   <p>
    We just have to add the right entry into the configuration files <b><span style="color: #339966;">grub.cfg</span></b> of grub 2.0 or, if appropriate, in <b><span style="color: #339966;">menu.lst</span></b> of grub 0.97.   
   <p>
    1. /boot/grub/grub.cfg
   
   <pre class="output"> ....
 
menuentry "NuTyX avec kernel experimental sur /dev/sda2" {
  set root=(hd0,2)
  linux /home/thierry/linux-3.17.4/arch/x86/boot/bzImage root=/dev/sda2 ro quiet
}
   </pre>

   <p>
    2. /boot/grub/menu.lst

   <pre class="output">...
# (3) NuTyX sur /dev/sda2
title NuTyX with experimental kernel on /dev/sda2
root (hd0,1)
kernel /home/thierry/linux-3.17.4/arch/x86/boot/bzImage root=/dev/sda2 ro quiet
   </pre>

   <p>
    And that's it! This way, you will still be able to choose at boot time which kernel your NuTyX should be running.
   <p>
    Last but not least, to experiment with other options of your working (or not yet working) new kernel is very simple.
    You just type again the 4 magic commands:
  <pre class="command_user"><kbd>cd linux-3.17.4
make menuconfig
make -j4
sudo make modules_install</kbd></pre>
   <p>
    And that's all <img src="../graphics/smiley-cool.gif" border="0" alt="Cool" title="Cool" />
