<h1>Comment construire un premier paquet ?</h1>
 <a name='ID010'></a>
 <h2>Pourquoi vouloir construire un paquet ?</h2>
 <p>
  NuTyX dispose actuellement de quelques <a href="packages" title="Lire dans une autre fenêtre" class="external" onclick="window.open(this.href); return false;">1700 applications</a> disponibles en binaires.
  C'est à la fois beaucoup et pas beaucoup en effet tous les jours ou presque sortent de nouvelles applications sous licence libre (ou pas)
 <p>
  Vous l'avez compris, vous ne trouverez jamais TOUTES les applications disponibles sur le net pr&ecirc;tes &agrave; &ecirc;tre install&eacute;es sur NuTyX.
  Rien que sur le site de <a href="http://sourceforge.net/">sourceforge.net</a>,  on peut y trouver plus de 5000 applications toutes plateformes confondues.
  Si vous avez trouvez l'application de vos rêves, il faudra  par un moyen ou un autre la compiler, l'installer et la faire fonctionner dans NuTyX.
  Pour cela nous allons vous demander de contribuer un petit peu. C'est vous qui allez construire le <a href="dictionary#ID005">paquet</a>... Si vous le voulez bien.
 <p>
  Compiler une application se r&eacute;sume souvent à faire les manipulations suivantes:
  <ul>
   <li>
    Trouver l'application qui n'existe pas sur NuTyX.
   <li>
    Télécharger les sources de l'application.
   <li>
    Vérifier la somme MD5 (vivement recommendé mais hélas pas toujours possible).
   <li>
    Extraire les sources dans un dossier de travail.
   <li>
    Entrer dans ce dossier de travail.
   <li>
    Vérifier que toutes les <a href="dictionary#ID006">dépendances</a> sont existantes dans NuTyX pour que la compilation de la nouvelle application se termine avec succès.
   <li>
    Taper les 3 commandes magiques (pas toujours le cas):
  </ul>
  <pre class="output">./configure --prefix=/usr
make
make install</pre>
   <p>
    La commande "make install" doit être lancée via le compte root.
   <p>
    Et voil&agrave; votre nouvelle application est compil&eacute;e et disponible dans NuTyX.
   <p>
    C'est une façon de faire, mais comme vous pouvez le constater, elle n'est pas sans inconvénients:
   <ul>
    <li>
     Aucun moyen de retrouver les fichiers installés.
    <li>
     Aucun moyen de retrouver les informations sur le <a href="dictionary#ID005">paquet</a> install&eacute; cad le nom, la version, la description etc.
    <li>
     Aucun moyen de retrouver le <a href="dictionary#ID005">paquet</a> si vous souhaitez l'installer sur une autre machine.
    <li>
     Cette méthode est relativement fastidieuse, chaque op&eacute;ration doit imp&eacute;rativement &ecirc;tre refaite en cas de mise &agrave; jour par exemple.
    <li>
     Aucun <a href="dictionary#ID005">paquet</a> n'a &eacute;t&eacute; cr&eacute;&eacute;, ce qui est tr&egrave;s dommage si vous souhaitez le partager avec d'autres utilisateurs de NuTyX.
    <li>
     Votre NuTyX n'est plus vraiment propre puisque vous avez ajout&eacute; une application (ou m&ecirc;me plusieurs si il y avait des <a href="dictionary#ID006">d&eacute;pendances.</a>
     Cette application ne peut pas &ecirc;tre g&eacute;r&eacute;e par <a href="dictionary#ID000">le gestionnaire de paquets</a>.
   </ul>
   <p>
    NuTyX dispose d'outils tr&egrave;s faciles d'emploi qui vous faciliteront grandement la tâche et surtout qui vous permetteront
    de maintenir et int&eacute;grer la nouvelle application fra&icirc;chement compil&eacute;e.
   <p>
    Je vous invite aussi à aller lire <a href="faq#4">la FAQ</a> pour prendre connaissance des modes de compilation sous NuTyX.
 <a name='ID020'></a>
 <h2>Quelles sont les connaissances nécessaires pour construire un paquet ?</h2>
  <h3>Introduction</h3>
    <p>
     Pour pouvoir contribuer il ne faut pas être un programmeur averti.
     Quelques notions rudimentaires du langage BASH suffisent.
    <p>
     Si vous n'avez aucune idée du langage BASH, cet article vous expliquera les notions de base pour réaliser une recette sans se prendre la tête.
    <p>
     C'est le langage BASH qui est utilisé pour la rédaction d'une recette et la génération du paquet qui en découle.
     Le fait que BASH soit un langage de programmation peut effrayer plus d'un utilisateur potentiel pensant:
     "Je ne sais pas programmer..."
    <p>
     Cela ne devrait pas être le cas pour trois raisons:
     <ul>
      <li>
       BASH est un langage interprêté et non compilé, c'est à dire que les commandes tapées au clavier (ou lues depuis un fichier) sont directement exécutées sans qu'il ne soit nécessaire de construire un programme complet.
      <li>
       La syntaxe de BASH est très simple et intuitive à l'utilisation.
      <li>
       Une recette et la génération du paquet binaire qui en découle, utilise que très rarement des options compliquées du langage BASH.
     </ul>

    <p>
     Alors on y va <img src="../graphics/smiley-wink.gif" alt="Wink" title="Wink" /> pour un petit cours sur la langage de programmation BASH.
   <h3>Déclaration d'une variable</h3>
    <p>
     Déclarer une variable se limite à ceci:
     <pre class="command_user"><kbd>name=monpaquet</kbd></pre>
    <p>
     On déclare la variable <b>name</b> en utilisant le signe égal et la valeur de la variable est à droite du signe égal: <b>monpaquet</b>
   <h3>Utilisation d'une variable</h3>
    <p>
     On a appris comment déclarer une variable, c'est bien joli, mais comment fait-on pour l'utiliser, c'est à dire récupérer son contenu ?
    <p>
     Pour pouvoir récupérer le contenu d'une variable on utilise le sigle dollar ($) et éventuellement les accolades. Deux formes sont valides:
     <pre class="command_user"><kbd>${name}
$name</kbd></pre>
    <p>
     Il est recommandé d'utiliser la première forme car si vous utilisez un nom de variable avec des sous-tirets, l'interprétation ne sera pas correcte:
     <pre class="command_user"><kbd>name=xorg-libx11
_name=libX11
$name         # interprétation correcte
${_name}      # interprétation correcte
$_name        # mauvaise interprétation, ne fonctionnera pas</kbd></pre>
    <p>
     Pour voir le résultat de cette commande je vous propose de créer un petit fichier appelé DeclarVar comme suit:
     <pre class="command_user"><kbd>name=kernel
echo "La variable name contient la valeur: ${name}"</kbd></pre>
    <p>
     Lancez maintenant la commande:
    <pre class="command_user" ><kbd>sh DeclareVar</kbd></pre>
    <pre class="output" >La variable name contient la valeur: kernel</pre>
  <h3>Variables prédéfinies utilisables dans une recette</h3>
    <p>
     Lorsque vous construisez une recette,vous aurez à votre disposition toute une série de variables prédéfinies.
    <p>
     <b>PKG</b>: Sans doute la plus utilisée, elle définit le dossier de destination des fichiers compilés.
     C'est donc dans ce dossier que se trouve la structure des fichiers prêts à être empaquetés.
    <p>
     <b>SRC</b>: Cette variable définit le dossier où toutes les sources sont extraites.
     Elle est donc aussi très utile lorsqu'il faut parcourir des sous-dossiers et revenir à la fin d'une boucle au dossier de départ, c'est à dire dans le dossier défini par SRC.
     C'est aussi la variable qui définit le dossier courant dans la fonction principale de la recette.
    <p>
     <b>MAKEFLAGS</b>: Cette variable n'est pas très souvent utilisée.
     Elle est initialisée dans le fichier de configuration de pkgmk.
     On verra ça en détail dans un autre article, il faut juste savoir pour l'instant qu'elle permet d'influencer la compilation parallèle.
    <p>
     Il en existe d'autres mais personnellement je n'en vois pas l'utilité dans la construction d'une recette.
   <h3>Déclaration d'un tableau</h3>
    <p>
     Pour déclarer un tableau de chaîne (ou autre) on va ajouter des parenthèses:
     <pre class="output">source=(firefox.png firefox.desktop)</pre>
    <p>
     Le tableau <b>source</b> contient 2 variables: firefox.png et firefox.desktop.
     Si on prend le tableau source de la recette du kernel, on a un joli exemple:
     <pre class="output">source=(http://download.virtualbox.org/virtualbox/${VB_VERSION}/VirtualBox-${VB_VERSION}-${VB_BUILD}-Linux_${VB_ARCH}.run
	http://fr.download.nvidia.com/XFree86/Linux-${_ARCH}/${NVIDIA_VERSION}/NVIDIA-Linux-${_ARCH}-${NVIDIA_VERSION}.run
	http://www.kernel.org/pub/linux/kernel/v3.0/linux-${_BaseVersion}.tar.bz2 config_64 config)</pre>
     <p>
      Chaque ligne est une variable que l'on peut appeler en utilisant la syntaxe:
      <pre class="command_user"><kbd>echo "$(source[1])"</kbd></pre>
     <p>
      Vous noterez que chaque variable peut à son tour contenir d'autres variables pour autant qu'elles soient définies au préalable.
  <h3>Déclaration d'une fonction</h3>
     <p>
      Pour déclarer une fonction, c'est presque aussi simple, on utilise les parenthèses pour spécifier le nom de la fonction, la fonction est toujours délimitée par les accolades <b>{</b> et <b>}</b>.
      Petit exemple:
   <pre class="output">build() {
cd $name-$version
./configure --prefix=/usr
make
make DESTDIR=$PKG install
}</pre>
     <p>
      Comme on peut le voir, c'est bel et bien le contenu d'une recette minimale (sans la déclaration des variables).
      On peut y voir l'utilisation incontournable de la variable <b>PKG</b>.
 <a name='ID030'></a>
 <h2>Qu'est-ce qu'un port ?</h2>
  <h3>Introduction</h3>
   <p>
    Le port est un dossier contenant un certain nombre de fichiers (au minimum 1) nécessaire pour la construction d'un paquet.
    La commande <b>pkgmk</b> permet de "construire" le paquet qui sera ensuite installable.
   <p>
    Pour être fonctionnel, ce dossier doit contenir au minimum un fichier appelé <b><span style="color: #007a00;">Pkgfile</span></b>.
    C'est grâce à ce fichier que la construction du paquet peut se faire.
    Le contenu de Pkgfile contient toutes les informations nécéssaires pour la construction ou plus exactement la compilation du paquet depuis les sources.
   <p>
    Le nom <i>port</i> est emprunté du monde BSD où un port se réfère à un logiciel
   "porté" sur un système d'exploitation ou une plateforme.
    Dans notre cas, le port est simplement la définition de la construction d'un paquet.
  <h3>Syntaxe minimale d'un port</h3>
   <p>
    Les informations minimales pour pouvoir produire le binaire sont:
    <ul>
     <li>
      <i><b>name</b></i> spécifie le nom du paquet qui sera construit.
     <li>
      <i><b>version</b></i> spécifie la version des sources du paquet.
     <li>
      <i><b>release</b></i> spécifie la N'ième tentative de construction du paquet.
      Sa valeur commence donc toujours à <b><i><u>1</u></i></b>
     <li>
      <i><b>source</b></i> contient l'adresse des sources du paquet que l'on souhaite empaqueter.
     <li>
      <i><b>build()</b></i> la fonction qui contient la recette proprement dîte.
    </ul>
   <p>
    Un petit exemple avec commentaires:
   <pre class="output"># Nom du paquet
name=gnome-terminal

# Version du paquet
version=2.6.4

# Release du paquet
release=1

# Emplacement des sources du paquet qui sera empaqueté
source=(https://ftp.gnome.org/pub/gnome/sources/$name/${version%.*}/$name-$version.tar.bz2)

# Définition de la recette proprement dite, souvent constitué des trois commandes standards
build() {
cd $name-$version
./configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info
make
make DESTDIR=$PKG install
}</pre>
   <p>
    Si vous comparez cet exemple avec un port officiel de NuTyX,
    vous constaterez que ce dernier contient plus d'informations.
    C'est ce que nous verrons dans le prochain paragraphe.
    Une ligne vous a peut-être attiré votre attention:
    <pre class="output">https://ftp.gnome.org/pub/gnome/sources/$name/${version%.*}/</pre>
   <p>
    La syntaxe ${version%.*} permet de substituer une valeur à N chiffres en une valeur à N-1 chiffres.
    C'est très souvent le cas pour les sources des paquets gnome. Dans notre exemple donc, la ligne:
    <pre class="output">https://ftp.gnome.org/pub/gnome/sources/$name/${version%.*}/</pre>
   <p>
    est identique à
    <pre class="output">https://ftp.gnome.org/pub/gnome/sources/$name/2.6/</pre>
   <p>
    puisque la variable <u>version</u>=2.6.4
  <h3>Exemple pratique d'une recette</h3>
   <h4>Le fichier libxfce4util/Pkgfile</h4>
    <pre class="output">description="libxfce4util, base library for Xfce"
url="http://docs.xfce.org/"

maintainer="git.xfce.org/xfce/xfce4-libutils"
packager="tnut <tnut@nutyx.org>"
contributors="Tyrry, Geantbrun"

makedepends=(glib intltool)

name=libxfce4util
version=4.14.1
release=1
source=(http://archive.xfce.org/src/xfce/${name}/${version%.*}/${name}-$version.tar.bz2)

build() {
cd ${name}-$version
./configure --prefix=/usr \
--disable-static
make
make DESTDIR=$PKG install
}</pre>
   <p>
    Si vous souhaitez que le serveur de construction puisse construire le paquet sans soucis,
    il est important de mentionner toutes les dépendances nécéssaires à la compilation de votre paquet,
    et ce en partant toujours d'une NuTyX de base.
    En effet le serveur construira toujours le paquet en partant de la même base.
   <p>
    La ligne <b>makedepends=(..)</b> est utilisée à cet effet,
    elle définie donc les dépendances nécéssaires à la <u>compilation</u> du paquet.
    On y indique les dépendances nécéssaires séparées par un espace.<img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />.    

 <a name='ID050'></a>
 <h2>Construire votre premier paquet</h2>
  <p>Nous connaissons les <a href="#ID010">raisons de contribuer</a>,
   <a href="#ID020">les connaissances requises</a>,
   le <a href="#ID030">format minimum d'une recette</a> et
   enfin quelles sont <a href="packages">les recettes existantes</a>.
  <p>
   Il est temps de passer à l'action,de construire et d'installer
   son premier paquet dans les règles de l'art (de NuTyX) <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />.
  <p>
   Nous allons d'abord voir ensemble comment construire un premier paquet binaire NuTyX
   au format <b>&lt;MonpaquetDateArch.cards.tar&gt;</b> depuis son code source sans entrer dans les détails de configuration pour l'instant.
  <p>
   Ce paquet fonctionnel pourra être installé et désinstallé dans votre NuTyX grâce à ses outils de gestion de paquets.
  <p>
   Vous aurez besoin des outils cards.devel installés pour compiler celui-ci.
  <p>
   Ce tutoriel simple peut être testé sur votre NuTyX quelle que soit sa configuration.
   <p>
    La recette du paquet choisi est un petit éditeur de texte ne nécessitant aucune dépendance.
   <div class="important"><img alt="[Important]" src="../graphics/caution.gif" />
      Pour ce paquet, on n'utilisera pas d'environnement isolé aussi appelé <a href="dictionary#ID100">chroot</a>.
      On verra dans un prochain article, comment construire dans cet environnement isolé.
      Parce que c'est la seule methode qui fonctionnera si l'on doit construire un paquet ayant des dépendances.
     </div>

  <h3>Un minimum d'explications</h3>
   <p>
    Tous les <a href="dictionary#ID005">paquets</a> disponibles sous NuTyX utilisent <a href="dictionary#ID060">une recette</a>.
   <p>
    Cette recette (<a href="dictionary#ID080">Pkgfile</a>) est rangée dans un dossier au nom du paquet
    qui est lui-même rangé dans une <a href="dictionary#ID010">collection</a>.
   <p>
    Les Collections se trouvent (par défaut) dans le dossier /usr/ports.

  <h3>La recette</h3>
   <p>
   On crée les répertoires nécessaires: la collection "perso" et le dossier du paquet.
<pre class="command_user"><kbd>sudo mkdir -p /usr/ports/perso/nano</kbd></pre>
  <pre class="command"><kbd>echo '
description="Command line Text Editor"
maintainer="Nano team"
packager="François Perrin francois dot perrin at myworld dot com"
url="http://www.nano-editor.org/"

name=nano
version=2.7.2
release=1

source=(${url}/dist/v${version:0:3}/$name-$version.tar.xz)

build() {
cd $name-$version
./configure --prefix=/usr \
--sysconfdir=/etc \
--enable-utf8 \
--enable-color \
--enable-multibuffer \
--enable-nanorc \
--docdir=/usr/share/doc/$name-$version
make
make DESTDIR=$PKG install
rm $PKG/usr/share/info/dir
}' &gt; /usr/ports/perso/nano/Pkgfile</kbd></pre>

  <h3>Installation des paquets de développement</h3>
   <pre class="command_user"><kbd>get cards.devel</kbd></pre>

  <h3>Compilation du paquet</h3>
   <pre class="command_user"><kbd>cd /usr/ports/perso/nano
sudo pkgmk -d</kbd></pre>

  <h3>Installation du paquet</h3>
   <pre class="command_user"><kbd>sudo pkgadd nano1*</kbd></pre>

  <h3>Les différents fichiers de configuration</h3>
   <h4>Le fichier /etc/cards.conf</h4>
    <p>
     Ce fichier est toujours présent dans une installation NuTyX.
    <p>
     C'est un peu "la colonne vertébrale" de votre NuTyX.
    <p>
     C'est le fichier <b>/etc/cards.conf</b> qui reflètera votre façon d'utiliser NuTyX.
    <p>
     Toutes les <a href="dictionary#ID010">collections</a> que vous souhaitez utiliser dans votre NuTyX peuvent y être spécifiées sous 2 formes possibles:
     <ol>
      <li>
        exemple de configuration de la collection <b>cli</b> en binaires depuis un serveur de dépot distant
        <pre class="output">dir /var/lib/pkg/depot/cli|http://downloads.nutyx.org</pre>
      <li>
        exemple de configuration de la collection <b>cli</b> en ports locals
        <pre class="output">dir /usr/ports/cli</pre>
     </ol>
    <p>
     Il est également responsable de la liste des paquets que vous souhaitez conserver lorsque vous exécutez la commande:
     <pre class="command"><kbd>cards base -r</kbd></pre>
     Et enfin il spécifie quelles locales seront installées
    <p>
     Vous trouverez plus d'informations en consultant le manuel de cards.conf
     <pre class="command"><kbd>man cards.conf</kbd></pre>
         
    <h4>Le fichier /etc/pkgmk.conf</h4>
     <p>
      Ce fichier est utilisé lors de la compilation de nouveaux ports.
      Il spécifie toutes les variables reconnues par la commande <b>pkgmk</b>
     <p>
      Veuillez prendre note des différentes variables qui sont à votre disposition en consultant le manuel de pkgmk.conf
      <pre class="command"><kbd>man pkgmk.conf</kbd></pre>

     <h5>Exemple de fichier /etc/pkgmk.conf</h5>
<pre class="output">export CFLAGS="-O2 -pipe"
export CXXFLAGS="${CFLAGS}"

case ${PKGMK_ARCH} in
        "x86_64")
		export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
                ;;
        "i686")
                export CFLAGS="${CFLAGS} -m32"
                export CXXFLAGS="${CXXFLAGS} -m32"
                export LDFLAGS="${LDFLAGS} -m32"
                ;;
        *)
                echo "Unknown architecture selected! Exiting."
                exit 1
                ;;
esac
# Those settings are typically set for packaging
# without sub packages and only french locale
# They are also the default ones
#
# PKGMK_GROUPS=()
# PKGMK_LOCALES=(fr)
# PKGMK_COMPRESS_PACKAGE="no"
# PKGMK_CLEAN="yes"
# PKGMK_IGNORE_FOOTPRINT="yes"
# PKGMK_KEEP_SOURCES="no"
# PKGMK_SOURCE_DIR="$PWD"
# PKGMK_WORK_DIR="$PWD/work"
# PKGMK_IGNORE_REPO="yes"
# PKGMK_IGNORE_COLLECTION="yes"
# PKGMK_IGNORE_RUNTIMEDEPS="yes"</pre>
 <h2>Conclusion</h2>
  <p>
  Nous voilà prêts pour la compilation de paquets.
  Nous allons maintenant voir ce qu'est <a href="collections">une collection.</a>
