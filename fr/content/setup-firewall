<h1>Mise en place d'un parefeu simple avec Iptables</h1>
 <h2>Introduction</h2>
  <p>
   Ce petit guide explique la mise en place d'un pare-feu "de base" sur NuTyX.
  <p>
   Il devrait vous permettre d'avoir un pare-feu qui démarre et s'éteint automatiquement avec votre réseau tout en protégeant votre machine.
  <p>
   Les règles du pare-feu seront statiques dans un script,
   donc sans l'utilisation des fonctions 'iptables-save' et 'iptables-restore'.
  <p>
   Il s'agit de règles simples et destinées à servir de base à la construction de son propre pare-feu.
  <p>
   A vous de l'adapter en fonction de vos besoins et de votre exigence en terme de sécurité.
 <h2>Installation</h2>
  <p>
   On installe Iptables 1.4.21 depuis les dépôts:
   <pre class="command"><kbd>
	check
	search iptables
	get iptables
    </kbd></pre>
 <h2>Création du script</h2>
  <p>
   Pour configurer votre pare-feu, créez ce fichier nommé parefeu dans /etc/rc.d/init.d/
   <pre class="output"><kbd>#!/bin/sh
## Fichier /etc/rc.d/init.d/parefeu

##------------------------------##
parefeu_start() {
  echo "Démarrage du pare-feu .."
	
# Politiques par défaut
  iptables -P INPUT DROP
  iptables -P FORWARD DROP
  iptables -P OUTPUT ACCEPT

# Autoriser loopback
  iptables -A INPUT -i lo -j ACCEPT

# Autoriser les connections établies
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Autoriser ssh en local
  iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 22 -j ACCEPT

# Autoriser transmission
  iptables -A INPUT -p tcp --dport 51413 -j ACCEPT
  iptables -A INPUT -p tcp --dport 56969 -j ACCEPT
}

##------------------------------##
parefeu_stop () {
  echo "Arrêt du pare-feu .."

# Suppression des règles
  iptables -F
  iptables -X
  iptables -P INPUT ACCEPT
  iptables -P FORWARD ACCEPT
  iptables -P OUTPUT ACCEPT
}

##------------------------------##
parefeu_restart() {
  parefeu_stop;
  sleep 2;
  parefeu_start;
}

case "$1" in
  'start')
    parefeu_start
    ;;

  'stop')
    parefeu_stop
    ;;

  'restart')
    parefeu_restart
    ;;

   'status')
    iptables -nvL
    ;;

   *)
    echo "Usage: parefeu {start|stop|restart|status}"
    ;;
esac</kbd></pre>
   <p>
    Puis rendez le exécutable et avec les bonnes permissions:
    <pre class="command_user"><kbd>sudo chmod 700 /etc/rc.d/init.d/parefeu</kbd></pre>
 <h2>Quelques explications</h2>
  <h3>Les règles</h3>
   <p>
    Iptables -P permet de définir la politique par défaut d'un chaine.
   <p>
    On peut voir que dans cette configuration on DROP (Refuser silencieusement) tout ce qui arrive (INPUT) et tout ce qui transite (FORWARD).
   <p>
    On remarque que tout ce qui est émis depuis le pare-feu (OUTPUT) est accepté.
   <p>
    Note : Il est courant de lire sur le net que la meilleure façon de procéder et de tout interdire puis d'autoriser au cas par cas selon les besoins dans la chaine OUTPUT.
   <p>
    Cependant cette méthode complique la configuration du pare-feu et dépasse le cadre de ce guide.
   <p>
    Plus loin on autorise l'interface du loopback et surtout les connexions déjà établies.
   <p>
    Cette règle est très importante lorsqu'on configure un pare-feu sur une machine distante, via ssh par exemple, et permet de ne pas se retrouver enfermé en dehors du pare-feu.
   <p>
    A titre d'exemple, j'ai ajouté des autorisations pour les connexions ssh provenant du réseau local, et une autorisation pour l'utilisation du torrent.
  <h3>Fonctionnement</h3>
   <p>
    Comme vous pouvez le voir en parcourant le script,
    le pare-feu possède les fonctions: allumer, éteindre, état et redémarrer.
   <p>
    Pour les utiliser:
    <pre class="command_user"><kbd>sudo /etc/rc.d/init.d/parefeu start (ou stop/status/restart)</kbd></pre>
 <h2>Mise en route</h2>
   <p>
    Notre script avec la configuration du pare-feu est prêt, maintenant il faudrait qu'il démarre automatiquement!
   <p>
    Rendez vous dans /etc/rc.d/.
   <p>
    On va configurer le script pour démarrer juste avant le réseau et s'éteindre juste après.
   <p>
    On remarque plusieurs dossiers nommés rc0.d/ rc1.d/ etc...
   <p>
    Ils correspondent au différents niveaux de init : voir /etc/inittab
   <p>
    Commençons par rc0.d/ :
    <pre class="command_user"><kbd>cd /etc/rc.d/rc0.d/ && l</kbd></pre>
    <pre class="output"><kbd>rwxr-xr-x  2 root root 4,0K mai    9 12:02 .
drwxr-xr-x 11 root root  115 févr. 14 20:33 ..
lrwxrwxrwx  1 root root   14 févr. 14 20:33 K00cups -> ../init.d/cups
lrwxrwxrwx  1 root root   18 mai    9 11:20 K40setclock -> ../init.d/setclock
lrwxrwxrwx  1 root root   16 mai    9 11:20 K45random -> ../init.d/random
lrwxrwxrwx  1 root root   17 mai    9 11:20 K80network -> ../init.d/network
lrwxrwxrwx  1 root root   14 oct.  29  2014 K85dbus -> ../init.d/dbus
lrwxrwxrwx  1 root root   18 mai    9 11:20 K90sysklogd -> ../init.d/sysklogd
lrwxrwxrwx  1 root root   21 mai    9 11:20 S60sendsignals -> ../init.d/sendsignals
lrwxrwxrwx  1 root root   18 mai    9 11:20 S90localnet -> ../init.d/localnet
lrwxrwxrwx  1 root root   14 mai    9 11:20 S99halt -> ../init.d/halt</kbd></pre>
   <p>
    Dans ce dossier correspondant à l'init 0, c'est à dire l'arrêt de la machine, on va se calquer sur network.
   <p>
    On peut voir : K80network -> ../init.d/network
   <p>
    Ce lien symbolique permet d’éteindre (Kill) le réseau. Le nombre détermine l'ordre d’exécution.
   <p>
    On veut donc éteindre notre parefeu juste après le reseau, donc:
    <pre class="command_user"><kbd>sudo ln -s ../init.d/parefeu K81parefeu</kbd></pre>
   <p>
    Il faut ensuite répéter cette opération dans les répertoires rc0.d/ jusqu'au rc6.d/
   <p>
    Dans chaque répertoire, quand network est réglé sur K80, on règle parefeu sur K81
   <p>
    Si network est réglé sur S20, on souhaite démarrer (Start) le pare-feu avant le réseau, donc:
    <pre class="command_user"><kbd>sudo ln -s ../init.d/parefeu S19parefeu</kbd></pre>
   <p>
    Voilà, vérifiez les 6 dossiers, les S et K, et le chiffre juste avant network au démarrage, juste après pour l'arrêt.
   <p>
    Il ne nous reste plus qu'à démarrer le pare-feu:
    <pre class="command_user"><kbd>sudo /etc/rc.d/init.d/parefeu start</kbd></pre>
   <p>
    Pour faire simple, créez vous un alias dans ~./bashrc:
    <pre class="output"><kbd>alias parefeu='sudo /etc/rc.d/init.d/parefeu'</kbd></pre>
   <p>
    On peut alors démarrer le pare-feu de cette manière:
    <pre class="command_user"><kbd>parefeu start</kbd></pre>
   <p>
    et vérifier les règles:
    <pre class="command_user"><kbd>parefeu status</kbd></pre>
 <h2>Sources</h2>
   <p>
    - <a href>https://wiki.archlinux.org/index.php/Simple_stateful_firewall</a>
   <p>
    - <a href>http://www.octetmalin.net/linux/scripts/iptables-demarrer-arret-redemarrage-start-stop-restart-pare-feu-firewall.php</a>
   <p>
    - <a href>http://www.yvangodard.me/mon-script-iptables/</a>

 <h2>Pour aller plus loin</h2>
  <pre class="command_user"><kbd>iptables -h</kbd></pre>
  <p>
   - <a href>http://www.delafond.org/traducmanfr/man/man8/iptables.8.html</a>
 <h2>Tester son pare-feu</h2>
  <p>
   - <a href>https://www.grc.com/x/ne.dll?bh0bkyd2</a>
  <p>
   (si vous êtes derrière un box, vous allez tester la box...)
    <pre class="command_user"><kbd>nmap -Pn votre_IP depuis une autre machine</kbd></pre>
  <p>
   --&gt; voir <a href>http://www.cyberciti.biz/networking/nmap-command-examples-tutorials/</a>
