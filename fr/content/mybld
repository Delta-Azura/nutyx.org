<h1>Mise en place de la commande "mybld"</h1>
 <h2>Important</h2>
  <p>
   Toutes les commandes se tapent dans votre compte personnel.
   Autrement dit, il ne faut pas utiliser le compte <i>root</i>.
  <p> 
   Une fois le projet GIT récupéré,
   toutes les manipulations DOIVENT se faire depuis le dosssier contenant votre projet GIT.

 <h2>Mise en place</h2>
  <h3>Les outils (paquets à installer)</h3>
   On part du principe que votre NuTyX est vierge de tout paquet de développement.
   On commence donc par installer les utilitaires:
   <pre class="command_user"><kbd>get rsync git</kbd></pre>

  <h3>Les recettes du projet GIT</h3>
   On  commence par cloner le projet GIT contenant toutes les recettes des paquets 64 bits de la NuTyX:
   <pre class="command_user"><kbd>git clone -b &ltbranch&gt git://github.com/NuTyX/packages-x86_64.git &ltbranch&gt</kbd></pre>
   La variable &ltbranch&gt peut prendre les valeurs <i>testing</i> ou <i>rolling</i>.
   <p>
   Une fois le projet GIT en place, on se déplace à la racine de celui-ci,
   en effet la commande <i><b>mybld</b></i> utilise des information du GIT
   (VERSION, USERNAME, EMAIL, etc).

  <h3>Aller à la racine du projet</h3>
   Le projet GIT est cloné.
   Il faut maintenant se rendre à la racine de celui-ci.
   <pre class="command_user"><kbd>cd  &ltbranch&gt</kbd></pre>
   <div class="important">
    Désormais toutes les commandes qui suivent doivent être effectuées depuis le dossier actuel.
   </div>

  <h3>Configurer son nom et email</h3>
   Cette étape est nécessaire si vous souhaitez partager vos nouveaux paquets, en effet,
   la commande <i><b>mybld -n</b></i> utilise cette information lors de la création de votre nouveau paquet.
   <pre class="command_user"><kbd>git config --global user.name "François Pignon"
git config --global user.email "francois@nutyx.org"</kbd></pre>

  <h3>Les dossiers de fonctionement</h3>
    La commande <i><b>mybld</b></i> utilise un ensemble de dossiers pour son fonctionnement,
    il faut donc les créer via la commande:
    <pre class="command_user"><kbd>mybld -I</kbd></pre>
   <p>
    Vous pouvez ajuster l'emplacement des dossiers de fonctionnement dans le fichier de configuration <i><b>~/.mybld</b></i>
    via les variables <b>ROOT</b>, <b>ROOTMOUNT</b> et <b>VERSION</b>.

  <h3>Collections disponibles</h3>
    Choisissez la collection sur laquelle vous souhaitez travailler.
   <p>
    En fonction de la collection choisie dans la colonne de gauche,
    vous récupérez les collections spécifiées dans la colonne de droite.
    <table>
     <caption>
     <EM>
      Liste des collections.
     </EM>
     </caption>
     <tr class="sidebar">
      <th>
       Collection choisie
      <th>
       Collection(s) à récupérer
     <tr class="even">
      <td>
       base
      <td>
       base
     <tr class="odd">
      <td>
       cli
      <td>
       base cli
     <tr class="even">
      <td>
       gui
      <td>
       base cli gui
     <tr class="odd">
      <td>
       cli-extra
      <td>
       base cli cli-extra
     <tr class="even">
      <td>
       gui-extra
      <td>
       base cli gui gui-extra
     <tr class="odd">
      <td>
       desktops
      <td>
       base cli gui desktops
    </table>

  <h3>Les collections en binaires</h3>
   En fonction de la collections choisie, lancer la commande:
   <pre class="command_user"><kbd>mybld -s nom_de_collection</kbd></pre> afin de récupérer la (les) collection(s) nécessaire(s).
  <p>
   Par exemple, pour une utilisation de la collection <i>gui</i>, lancer la commande:
   <pre class="command_user"><kbd>for i in base cli gui; do mybld -s $i;done</kbd></pre>
  <p>
   Si vous le souhaitez, vous pouvez également récupérer l'intégralitée des collections.
   Lancez alors la même commande mais sans arguments:
   <pre class="command_user"><kbd>mybld -s</kbd></pre>
  <p>
   Il est possible de spécifier une adresse et une version personnalisées
   dans le fichier de configuration <i><b>~/.mybld</b></i>
   via les variables <b>URL</b> et <b>VERSION</b>.

 <h2>Utiliser la commande</h2>
  <h3>(Re)Compiler un paquet</h3>
    <p>
     <pre class="command_user"><kbd>mybld nom_du_paquet</kbd></pre>
     La compilation commence immédiatement.
    <p>

  <h3>Incrementer la version et recompiler un paquet</h3>
    <p>
     <pre class="command_user"><kbd>mybld -i nom_du_paquet</kbd></pre>
     Après confirmation, la compilation commence immédiatement.
    <p>

 <h2>Mode avancée</h2>
   Supposons que vous ayez un paquet qui ne veut pas se compiler correctement.
   Dans ce cas le meilleur moyen est d'utiliser l'option <i>-p</i> pour <i>pause</i>.
  <p>
   Pour illustrer l'option <b>--pause</b>, je vais essayer de compiler le paquet nftables.
  <h3>Entrer dans la chroot</h3>
    <pre class="command_user"><kbd>mybld -p nftables</kbd></pre>
    <pre class="output">You are now in chroot.
Type exit when finish.

 Good luck !!!
 
</pre>
  <h3>Une nouvelle commande est née</h3>
   En fonction de la collection dans laquelle se trouve le paquet que vous souhaitez construire, une nouvelle commande appelée <b>&ltcollection_name&gt</b> est disponible.
   <p>
    Dans cette exemple, le paquet <i>nftables</i> appartient à la collection <i>cli-extra</i> on peut donc taper la commande:
    <pre class="command"><kbd>cli-extra -h</kbd></pre>
    <pre class="output">usage: cli-extra [option]
options:
   -a,   --all                 will build all the ports of the 'cli-extra' collection in the right order
   -l,   --list                will list all the ports of the 'cli-extra' collection in the right order
  -ru,   --remove-url          remove the URL part in /etc/cards.conf file for the 'cli-extra' collection
  -cp,   --check-ports         check if new ports are available
  -cb,   --check-binaries      check if binaries are uptodate
   -d,   --dry                 check if binaries are different then the ports but dont build anything
   -s,   --sync                synchronise binaries from rsync server location
   -c,   --config              printout the configuration
   -h,   --help                print help and exit
   -v,   --version             print version and exit
   -u,   --usage               print the recommended way of using the 'cli-extra' script</pre>

  <h3>Où est quoi ?</h3>
  Voilà une bonne question.
     <table>
     <caption>
      <EM>
       Emplacements de:
      </EM>
     </caption>
     <tr class="sidebar">
      <th>
       Dossier / Fichier
      <th>
       Emplacement
     <tr class="even">
      <td>
       DEPOT
      <td>
       /DEPOT
     <tr class="odd">
      <td>
       cli-extra collection DEPOT
      <td>
       /DEPOT/cli-extra
     <tr class="even">
      <td>
       nftables Pkgfile
      <td>
       /DEPOT/cli-extra/nftables/Pkgfile
     <tr class="odd">
      <td>
       Sources files
      <td>
       /sources
     <tr class="even">
      <td>
       Compilation logs
      <td>
       /LOGS
     <tr class="odd">
      <td>
       working directory
      <td>
       /tmp/work/src and
       /tmp/work/pkg
    </table>
  <h3>Continuer avec la compilation</h3>
  Essayons maintenant de compiler le paquet nftables. Tapez simplement:
  <pre class="command"><kbd>cli-extra nftables</kbd></pre>
  La compilation commence normalement.
  <p>
   Si une erreur survient, nous serons simplement à nouvau au prompt:
   <pre class="output">checking for LIBMNL... yes
checking for LIBNFTNL... no
configure: error: Package requirements (libnftnl >= 1.1.8) were not met:

No package 'libnftnl' found

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.

Alternatively, you may set the environment variables LIBNFTNL_CFLAGS
and LIBNFTNL_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.
=======> ERROR: Building '/DEPOT/cli-extra/nftables/nftables1608914972x86_64.cards.tar.xz' failed.
cards 2.4.124 create: could not parse Pkgfile: While running 'build()'</pre>

   
   
  <h3>Corriger l'erreur</h3>
   On peut maintenant corriger l'erreur en ajustant les dépendances:
   <pre class="command"><kbd>cards install libnftnl libnftnl.devel</kbd></pre>
   Nous allons donc dans le dossier de travail et essayons à nouveau:
   <pre class="command"><kbd>cd /tmp/work/src/nftables-0.9.7
 ./configure --prefix=/usr \
        --sysconfdir=/etc/nftables \
        --mandir=/usr/share/man \
        --with-json</kbd></pre>
  Déjà bien mieux.
  <pre class="output">nft configuration:
  cli support:			readline
  enable debugging symbols:	yes
  use mini-gmp:			no
  enable man page:              yes
  libxtables support:		no
  json output support:          yes
  enable Python:		yes (with /usr/bin/python)</pre>
  On peut maintenant terminer les commandes du Pkgfile:
  <pre class="command"><kbd>make</kbd></pre>
  La dernière commande du Pkgfile est:
  <pre class="output">make DESTDIR=$PKG install</pre>
  La variable PKG doit être définie sur /tmp/work/pkg:
  <pre class="command"><kbd>PKG=/tmp/work/pkg</kbd></pre>
  Il est temps de terminer:
  <pre class="command"><kbd>make DESTDIR=$PKG install
install -Dm644 ../nftables.conf "$PKG/etc/nftables/nftables.conf"</kbd></pre>
 
  <h3>Empaqueter</h3>
  Lorsque toutes les commandes du Pkgfile ont été tapé, on peut alors se rendre dans le dossier du Pkgfile et utiliser la commande pkgmk -po pour finir le paquet:
  <pre class="command"><kbd>cd /DEPOT/cli-extra/nftables/
pkgmk -po</kbd></pre>
 <h2>Aide</h2>
  <p>
   La commande <b><i>mybld</i></b> permet toute sorte d'options.
   <pre class="command_user"><kbd>mybld -h</kbd></pre>
  <p>
   Pensez à (re)lire le manuel disponible pour obternir plus d'information sur les autres options possibles:
   <pre class="command_user"><kbd>man mybld</kbd></pre>
