<h1>Compiler dans un environnement isolé</h1>

 <h2>Introduction</h2>
  <p>
   Cet article vous explique chaque étape pour la compilation de paquets dans une chroot.
  <div class="important">
    Ce tutoriel est désormais déprecié, <a href="mybld">il est vivement recommender de suivre ce tutoriel</a>
  </div>

 <h2>Ajuster /etc/cards.conf</h2>
  <p>
   Pour pouvoir installer les paquets compilés dans votre chroot, vous devez ajuster votre fichier <b>/etc/cards.conf</b>.
   Vous y ajouez en haut de celui-ci:
   <pre class="output">dir /mnt/hd/usr/ports/perso</pre>
  <p>
   Vous êtes maintenant prêt pour installer et configurer votre chroot.

 <h2>Installation de la chroot</h2>
  <p>
   <pre class="command"><kbd>VERSION="rolling" install-nutyx</kbd></pre>

 <h2>Entrer dans la chroot</h2>
  <p>
  <pre class="command"><kbd>install-nutyx -ec</kbd></pre>
  <div class="important">
    A partir de maintenant, tout ce que vous allez faire, vous le faite dans votre environnement chroot isolé.
  </div>
 
 <h2>Installation des outils de développement</h2>
  <p>
   L'installation par défaut est tout à fait adaptée donc un petit:
   <pre class="command"><kbd>get cards.devel</kbd></pre>

 <h2>Les fichiers de configuration</h2>
  <h3>/etc/cards.conf</h3>
   <pre class="command"><kbd>cat &gt;/etc/cards.conf &lt;&lt; EOF
dir /usr/ports/perso
dir /usr/ports/gui
dir /usr/ports/cli
dir /usr/ports/base
logdir /var/log/pkgbuild
base /usr/ports/base
EOF</kbd></pre>

   <p>Un dossier contenant mes recettes personnelles est ajouté.
    Ce dossier ainsi que les collections ne <u>doivent jamais</u> être mis à jour par la commande <b>cards sync</b>.
    On ne spécifie donc aucune URL.
   <p>
    Le dossier /var/log/pkgbuild contiendra les logs de compilation.
   <p>
    Je n'ai pas besoin de spécifier les locales, elles seront toujours toutes installées.
   <p>
    Le dossier /usr/ports/base définit le système de base lors de l'usage de la commande <b>cards base -r</b>.
  <h3>/etc/pkgmk.conf</h3>
    <pre class="command"><kbd>cat &gt; /etc/pkgmk.conf &lt;&lt; EOF
export CFLAGS="-O2 -pipe"
export CXXFLAGS="\${CFLAGS}"
case \${PKGMK_ARCH} in
    "x86_64"|"")
       export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
       ;;
    "i686")
       export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
       export CFLAGS="${CFLAGS} -m32"
       export CXXFLAGS="${CXXFLAGS} -m32"
       export LDFLAGS="${LDFLAGS} -m32"
       ;;
    *)
       echo "Unknown architecture selected! Exiting."
       exit 1
       ;;
esac
PKGMK_SOURCE_DIR="/tmp"
PKGMK_KEEP_SOURCES="yes"
PKGMK_WORK_DIR="/tmp/work"
PKGMK_IGNORE_REPO="no"
PKGMK_IGNORE_COLLECTION="no"
PKGMK_GROUPS=()
PKGMK_LOCALES=()
PKGMK_COMPRESS_PACKAGE="yes"
PKGMK_COMPRESSION_MODE="xz"
PKGMK_CLEAN="no"
PKGMK_IGNORE_RUNTIMEDEPS="no"
EOF</kbd></pre>
    <p>
     Il est indispensable de vérifier toutes les variables nécessaires pour le bon fonctionnement du duo <b>pkgmk/cards</b>.
    <p>
     Les sources sont stockées dans un dossier commun, je ne souhaite pas qu'elles soient effacées. 
    <p>
     Les binaires produits seront dans le format de compression xz.
    <p>
     Je ne souhaite pas supprimer mes binaires produits une fois installés.
    <p>
     Je souhaite que les dépendances soient ajoutées automatiquement dans le binaire.

   <h2>Synchronisation des binaires via rsync</h2>
    <p>
     Cette opération consiste à rapatrier les paquets contenus dans les collections <b>base, cli, et gui</b> disponibles en binaires.
     Elle peut durer entre quelques minutes et quelques heures en fonction de votre connection.
    <p>
     Heureusement, cette opération n'est à  faire qu'une fois
     <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />
     <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />
     <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />.
    <p>Il faut commencer par créer le dossier racine</p>
    <pre class="command"><kbd>mkdir -p /usr/ports/perso</kbd></pre>
    <p>
     On peut maintenant synchroniser l'ensemble des binaires:
     <pre class="command"><kbd>for i in base cli gui
do
  rsync -avz --delete-after rsync://downloads.nutyx.org/nutyx/`uname -m`/rolling/$i/ \
  /usr/ports/$i/
done</kbd></pre>
    <p>
     Allez peut-être boire un café, manger une pizza ou un bon paquet de frites
     <img src="../graphics/smiley-laughing.gif" alt="Laughing" title="Laughing" />,
     ça peut-être long...

 <h2>Compilation et installation de votre paquet</h2>
  <p>
   Vous commencez par créer le dossier dans lequel sera placé votre nouveau paquet. Appellons-le <b>monpaquet</b> (à adapter avec le nom réel)
   <pre class="command"><kbd>mkdir /usr/ports/perso/monpaquet</kbd></pre>
  <p>
   On crée maintenant la recette (à adapter avec votre paquet réel):
   <pre class="output">description="Mon premier paquet de la mort avec des dépendances"
url="http://www.mon-premier-paquet.org/"

packager="francis perrin"

makedepends=(python gtk3 librsvg)

name=monpaquet
version=1.0.0
release=1
source=(${url}downloads/$name/$name-$version.tar.xz)
build() {
   cd $name-$version
   ./configure --prefix=/usr
   make
   make DESTDIR=$PKG install
}</pre>
  <p>
   Il ne nous reste plus qu'à lancer la compilation et l'installation de notre paquet
   <pre class="command"><kbd>cards create -r monpaquet</kbd></pre>
  <p>
   Je vous invite à consulter l'aide de cards pour comprendre le fonctionnement de <b>cards create -r</b>
   <pre class="command"><kbd>man cards</kbd></pre>

 <h2>Conclusion</h2>
   <p>
    Les commandes à retenir sont:
      <pre class="command"><kbd>cards level
cards base -r
cards create -r</kbd></pre>
